package analizadorlexico;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal NUMERO, NUMERO_OCT, NUMERO_HEX, NUMERO_FLOAT, LITERAL, LONG, INT,
    CHAR, FLOAT, DOUBLE, SHORT, IF, ELSE, DO, WHILE, FOR, BREAK, CASE, CONST, CONTINUE, 
    DEFAULT, RETURN, SWITCH, VOID, IDENTIFICADOR, OP_LOGICO, OP_RELACIONAL,
    OP_BOOLEANO, OP_ATRIBUCION, OP_INCDEC, PARIZQ, PARDER, LLAVEIZQ, LLAVEDER, 
    CORCHETEIZQ, CORCHETEDER, PCOMA;

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, VARIABLES, FUNCIONES, DECLARACIONES, PROGRAMA;

start with PROGRAMA;

PROGRAMA ::= DECLARACIONES FUNCIONES | FUNCIONES
;

DECLARACIONES ::= /*vacio*/ | DECLARACION DECLARACIONES
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;

T_DATO ::= LONG | INT | CHAR | FLOAT | DOUBLE | SHORT
;

Cadena ::= CHAR CORCHETEIZQ NUMERO CORCHETEDER | CHAR CORCHETEIZQ CORCHETEDER
;

DECLARACION ::= 
    T_DATO IDENTIFICADOR PCOMA | // int a;
    T_DATO IDENTIFICADOR OP_ATRIBUCION Numero PCOMA | // int a = 1.1;
    T_DATO IDENTIFICADOR Igual Numero PCOMA |
    T_DATO IDENTIFICADOR OP_INCREMENTO PCOMA | 
    T_DATO OP_INCREMENTO IDENTIFICADOR PCOMA | 
    Cadena IDENTIFICADOR Op_atribucion Comillas Comillas PCOMA |
    Cadena IDENTIFICADOR Igual Comillas Comillas PCOMA |
    Cadena IDENTIFICADOR Op_atribucion Comillas Identificador Comillas PCOMA |
    Cadena IDENTIFICADOR Igual Comillas Identificador Comillas PCOMA
;
IF ::= If Parentesis_i SENTENCIA_BOOLEANA Parentesis_d Llave_i SENTENCIA Llave_d
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parentesis_i SENTENCIA_BOOLEANA Parentesis_d Llave_i SENTENCIA Llave_d Else Llave_i SENTENCIA Llave_d
;
WHILE ::= While Parentesis_i SENTENCIA_BOOLEANA Parentesis_d Llave_i SENTENCIA Llave_d
;
DO_WHILE ::= Do Llave_i SENTENCIA Llave_d While Parentesis_i SENTENCIA_BOOLEANA Parentesis_d P_coma
;
FOR ::= For Parentesis_i SENTENCIA_FOR Parentesis_d Llave_i SENTENCIA Llave_d
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;

