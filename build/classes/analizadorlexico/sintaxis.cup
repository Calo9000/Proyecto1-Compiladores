package analizadorlexico;

import java_cup.runtime.Symbol;
import java.io.FileReader;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

    
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("Error encontrado");
        report_error(message, info);
        System.exit(1);
    }
    
    public static void main(String[] args){
        try {
            System.out.println("Abriendo archivo " + args[0]);
            parser asin = new parser(
                    new AnalizadorLexicoCup( new FileReader(args[0])));
            asin.parse();
            System.out.println("\n----------------");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

:};

terminal NUMERO, NUMERO_OCT, NUMERO_HEX, NUMERO_FLOAT, LITERAL, LONG, INT,
    CHAR, FLOAT, DOUBLE, SHORT, IF, ELSE, DO, WHILE, FOR, BREAK, CASE, CONST, CONTINUE, 
    DEFAULT, RETURN, SWITCH, VOID, IDENTIFICADOR, IGUAL, SUMA, RESTA, MULTIPLICACION, DIVISION, 
    OP_LOGICO, OP_RELACIONAL, OP_BOOLEANO, OP_ATRIBUCION, OP_INCDEC, OP_NEGACION, 
    PARIZQ, PARDER, LLAVEIZQ, LLAVEDER, READ, WRITE, DOSPUNTOS,
    CORCHETEIZQ, CORCHETEDER, PCOMA, COMA, 
    ERROR
;

non terminal inicio, sentencias, sentencia, declaracion, declaracion_for, declaracion_multiple, if, if_else,
    while, do_while, for, sentencia_booleana, variables, funciones, 
    declaraciones, programa, t_dato, cadena, parametros, parametros_opc, 
    parametro, dentro_funcion, cuerpo, funcion, tipo, asignacion, valor_numerico,
    array, variable, elementos, elemento, valor, operacion, operaciones, operador, valor_especifico, 
    error_declaracion, error_valor, error_return, error_declaracion_multiple, 
    cosa, cosas, inicial, return, sentencia_if,
    sentencia_llaves, sentencia_while, instruccion, argumentos, argumento, sentencia_do,
    sentencia_else, sentencia_switch, cases, sentencia_case, sentencia_for, cosa_funcion, parametro_error,
    funcion_error, error_sentencia_if, error_sentencia, error_sentencia_llaves,error_sentencia_while
;

precedence right INT;
precedence right CHAR;
precedence right ELSE; 
precedence right LONG;
precedence right FLOAT;
precedence right DOUBLE;
precedence right SHORT;
precedence right NUMERO_FLOAT;
precedence right NUMERO_HEX;
precedence right NUMERO_OCT;
precedence right NUMERO;
precedence right LITERAL;
precedence left RETURN;



precedence left SUMA;
precedence left RESTA;
precedence left MULTIPLICACION;
precedence left DIVISION;
precedence left OP_LOGICO;
precedence left OP_RELACIONAL;
precedence right OP_INCDEC;
precedence right IDENTIFICADOR;
precedence right WHILE;

precedence left PARDER;
precedence left PARIZQ;
precedence left LLAVEDER;
precedence left LLAVEIZQ;
precedence left CORCHETEDER;
precedence left CORCHETEIZQ;
precedence left PCOMA;
precedence left OP_LOGICO;
precedence left OP_NEGACION;
precedence left CONST;
precedence left VOID;
precedence left COMA;


start with inicial;


inicial ::= programa
;

programa ::= programa cosa | /*vacio*/
;


cosa ::= declaracion | funcion | asignacion:i PCOMA {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Asignación fuera de lugar"); :} | 
    error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Símbolo no esperado"); :}
;


t_dato ::= LONG | INT | CHAR | FLOAT | DOUBLE | SHORT
;

valor_numerico ::= NUMERO | NUMERO_FLOAT | NUMERO_OCT | NUMERO_HEX
;

operador ::= SUMA | RESTA | MULTIPLICACION | DIVISION | OP_LOGICO | OP_RELACIONAL 
;

operacion ::= valor operador valor | OP_INCDEC variable | variable OP_INCDEC | OP_NEGACION valor
;

valor ::= PARIZQ valor PARDER | valor_numerico | LITERAL | array | operacion | variable | IDENTIFICADOR PARIZQ PARDER | IDENTIFICADOR PARIZQ elementos PARDER 
;

array ::= LLAVEIZQ elementos LLAVEDER | LLAVEIZQ LLAVEDER
;

elementos ::= valor COMA elementos | valor
;


variable ::= IDENTIFICADOR | IDENTIFICADOR CORCHETEIZQ CORCHETEDER | IDENTIFICADOR CORCHETEIZQ NUMERO CORCHETEDER
;

error_declaracion ::= 
    t_dato asignacion | 
    t_dato 
;

declaracion ::= 
    t_dato declaracion_multiple PCOMA|
    t_dato variable PCOMA | 
    CONST t_dato IDENTIFICADOR asignacion PCOMA |
    CONST t_dato IDENTIFICADOR PCOMA |
    error_declaracion:i
    {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :}
;
error_declaracion_multiple ::=
    IDENTIFICADOR:i declaracion_multiple {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta una coma"); :}
;

declaracion_multiple ::= 
    variable COMA declaracion_multiple | variable | error_declaracion_multiple
;

asignacion ::=
    variable IGUAL valor
;



parametros ::= parametro COMA parametros | parametro
;

parametros_opc ::= /*vacio*/ | parametros
;

parametro ::= t_dato variable | parametro_error
;

parametro_error ::= 
    variable:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta tipo de dato del argumento."); :} | 
    t_dato:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta el argumento"); :}
;

return ::= RETURN valor PCOMA | RETURN PCOMA | error_return 
;

error_return::=
    RETURN valor:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :}|
    RETURN error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Return Inválido"); :}
;

funcion ::=
    t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion LLAVEDER 
    | 
    VOID IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion LLAVEDER
    | 
    funcion_error
;

funcion_error ::=
    t_dato IDENTIFICADOR PARIZQ parametros_opc:i LLAVEIZQ dentro_funcion LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} | 
    t_dato IDENTIFICADOR parametros_opc:i PARDER LLAVEIZQ dentro_funcion LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} |
    t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER:i dentro_funcion LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave"); :} | 
    t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave"); :}
;

dentro_funcion ::= dentro_funcion cosa_funcion | /*vacio*/ 
;

cosa_funcion ::= declaracion | sentencia
;

sentencias ::= 
    sentencia sentencias | sentencia
;

sentencia ::=
    asignacion:i PCOMA  | // a = 1;
    IDENTIFICADOR OP_ATRIBUCION NUMERO PCOMA // a+=1;
    | valor PCOMA
    | return 
    | sentencia_if
    | sentencia_if ELSE sentencia
    | sentencia_llaves
    | sentencia_while
    | instruccion PCOMA
    | sentencia_do
    | BREAK PCOMA
    | CONTINUE PCOMA
    | sentencia_switch
    | sentencia_for
    | ELSE:i sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Else solo"); :}
    | error_sentencia
;

error_sentencia ::=
    asignacion:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} | 
    IDENTIFICADOR OP_ATRIBUCION NUMERO:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} | 
    valor:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} |
    instruccion:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} |
    BREAK:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} |
    CONTINUE:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :}
;

sentencia_llaves ::= LLAVEIZQ sentencias LLAVEDER
;

sentencia_if ::= IF PARIZQ valor PARDER sentencia
    | error_sentencia_if
;

error_sentencia_if ::= 
    IF:i error LLAVEIZQ sentencias LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura de If inválida"); :}
;

sentencia_while ::= WHILE PARIZQ operacion PARDER sentencia | error_sentencia_while
;

error_sentencia_while ::= 
    WHILE:i operacion PARDER sentencia  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} | 
    WHILE PARIZQ operacion:i sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} 
;

error_sentencia_llaves ::= 
    LLAVEIZQ sentencias:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave derecha"); :} | 
    sentencias:i LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave izquierda"); :}
;

argumentos ::= argumento | argumento COMA argumentos
;

argumento ::= valor 
;

instruccion ::= 
    READ PARIZQ argumentos PARDER | READ PARIZQ PARDER | WRITE PARIZQ argumentos PARDER
; 

sentencia_do ::= 
    DO sentencia WHILE PARIZQ operacion PARDER PCOMA
;

sentencia_switch ::= SWITCH PARIZQ valor PARDER LLAVEIZQ cases LLAVEDER
;

cases ::= sentencia_case cases | sentencia_case;

sentencia_case ::= CASE valor DOSPUNTOS sentencias | DEFAULT DOSPUNTOS sentencias
;

sentencia_for ::= FOR PARIZQ asignacion PCOMA operacion PCOMA operacion PARDER sentencia
;