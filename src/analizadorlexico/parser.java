
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.Symbol;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Arrays;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Set;
import java.io.FileWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\004\000\002\034\004\000\002\034" +
    "\004\000\002\011\004\000\002\011\002\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\004\000\002\061\003\000\002" +
    "\061\004\000\002\060\003\000\002\060\003\000\002\062" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\024\005\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\024\003\000\002\072\004\000\002" +
    "\023\005\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\005" +
    "\000\002\023\006\000\002\023\003\000\002\020\005\000" +
    "\002\020\004\000\002\020\004\000\002\105\004\000\002" +
    "\105\004\000\002\105\004\000\002\106\002\000\002\106" +
    "\005\000\002\021\003\000\002\027\004\000\002\027\006" +
    "\000\002\027\005\000\002\027\007\000\002\107\002\000" +
    "\002\004\006\000\002\004\005\000\002\004\007\000\002" +
    "\004\006\000\002\004\003\000\002\004\003\000\002\031" +
    "\004\000\002\100\004\000\002\101\002\000\002\101\005" +
    "\000\002\017\005\000\002\017\006\000\002\017\003\000" +
    "\002\073\005\000\002\103\002\000\002\110\002\000\002" +
    "\103\004\000\002\102\004\000\002\104\002\000\002\104" +
    "\005\000\002\012\004\000\002\012\003\000\002\053\003" +
    "\000\002\053\003\000\002\035\005\000\002\035\004\000" +
    "\002\035\003\000\002\030\004\000\002\030\004\000\002" +
    "\015\012\000\002\015\012\000\002\015\003\000\002\013" +
    "\004\000\002\013\002\000\002\052\003\000\002\052\003" +
    "\000\002\002\004\000\002\002\003\000\002\003\004\000" +
    "\002\003\006\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\076\004\000\002" +
    "\037\005\000\002\037\005\000\002\036\007\000\002\075" +
    "\005\000\002\006\003\000\002\077\006\000\002\040\004" +
    "\000\002\040\003\000\002\042\003\000\002\042\005\000" +
    "\002\042\004\000\002\043\003\000\002\041\006\000\002" +
    "\041\005\000\002\041\006\000\002\041\003\000\002\074" +
    "\003\000\002\044\011\000\002\044\003\000\002\046\011" +
    "\000\002\046\003\000\002\047\004\000\002\047\003\000" +
    "\002\050\006\000\002\050\005\000\002\050\005\000\002" +
    "\050\003\000\002\051\013\000\002\051\003\000\002\056" +
    "\005\000\002\056\003\000\002\056\004\000\002\056\003" +
    "\000\002\056\003\000\002\054\011\000\002\054\011\000" +
    "\002\054\011\000\002\054\012\000\002\054\012\000\002" +
    "\054\013\000\002\065\004\000\002\065\004\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\002" +
    "\000\002\055\007\000\002\057\006\000\002\057\006\000" +
    "\002\066\007\000\002\066\010\000\002\067\006\000\002" +
    "\067\004\000\002\067\004\000\002\067\006\000\002\067" +
    "\005\000\002\070\007\000\002\070\011\000\002\070\010" +
    "\000\002\071\005\000\002\071\004\000\002\071\004\000" +
    "\002\063\012\000\002\063\012\000\002\063\011\000\002" +
    "\063\007\000\002\063\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\102\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\026\ufffd\027\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\054\ufffd\055" +
    "\ufffd\064\ufffd\001\002\000\102\003\046\004\007\005\035" +
    "\006\045\007\111\010\063\011\077\012\022\013\012\014" +
    "\073\015\016\016\010\017\036\020\066\021\113\022\071" +
    "\023\025\024\053\026\011\027\017\031\043\032\057\033" +
    "\054\034\027\046\102\047\015\050\042\051\105\052\072" +
    "\054\070\055\026\064\056\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\134\003\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\064\uffeb\001\002\000\012\034" +
    "\uffec\051\uffec\052\uffec\062\uffec\001\002\000\016\011\077" +
    "\012\022\013\012\014\073\015\016\016\010\001\002\000" +
    "\012\034\uffef\051\uffef\052\uffef\062\uffef\001\002\000\134" +
    "\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\001" +
    "\002\000\112\003\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b" +
    "\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016" +
    "\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b" +
    "\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b" +
    "\053\uff7b\054\uff7b\055\uff7b\056\uff7b\064\uff7b\001\002\000" +
    "\042\004\007\005\035\006\045\007\111\010\063\011\077" +
    "\012\022\013\012\014\073\015\016\016\010\034\135\046" +
    "\102\047\015\050\121\052\134\001\002\000\012\034\uffed" +
    "\051\uffed\052\uffed\062\uffed\001\002\000\114\003\uff6c\004" +
    "\uff6c\005\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c" +
    "\013\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021" +
    "\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c" +
    "\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\046\uff6c\047" +
    "\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c" +
    "\056\uff6c\061\u0127\064\uff6c\001\002\000\112\003\uff71\004" +
    "\uff71\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71" +
    "\013\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021" +
    "\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71" +
    "\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\046\uff71\047" +
    "\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054\uff71\055\uff71" +
    "\056\uff71\064\uff71\001\002\000\070\004\007\005\035\006" +
    "\045\007\111\010\063\011\077\012\022\013\012\014\073" +
    "\015\016\016\010\017\036\020\066\021\113\022\071\023" +
    "\025\024\053\027\017\031\043\032\057\034\027\046\102" +
    "\047\015\050\121\052\072\054\070\055\026\001\002\000" +
    "\012\034\ufff0\051\ufff0\052\ufff0\062\ufff0\001\002\000\112" +
    "\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\064\uffaa\001\002\000\104\003\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe\027\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\u011d\054\ufffe\055\ufffe\064\ufffe\001" +
    "\002\000\022\011\077\012\022\013\012\014\073\015\016" +
    "\016\010\034\116\050\u0106\001\002\000\006\003\375\050" +
    "\376\001\002\000\136\003\uffca\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\045\372\046\uffca\047\uffca\050\136\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\001\002\000\112\003\uff86\004" +
    "\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86" +
    "\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021" +
    "\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86" +
    "\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\046\uff86\047" +
    "\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86" +
    "\056\uff86\064\uff86\001\002\000\112\003\uff9a\004\uff9a\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\371\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\034\uff9a\046\uff9a\047\uff9a\050" +
    "\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a" +
    "\064\uff9a\001\002\000\070\004\007\005\035\006\045\007" +
    "\111\010\063\011\077\012\022\013\012\014\073\015\016" +
    "\016\010\017\036\020\066\021\113\022\071\023\025\024" +
    "\053\027\017\031\043\032\057\034\027\046\102\047\015" +
    "\050\121\052\072\054\070\055\026\001\002\000\106\002" +
    "\uffa5\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5" +
    "\027\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\064\uffa5\001\002\000\006\003\uff7e\061\uff7e\001\002\000" +
    "\134\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\001\002\000\004\050\363\001\002\000\112\003\uff97\004" +
    "\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97" +
    "\056\uff97\064\uff97\001\002\000\112\003\uff96\004\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\033\uff96\034\uff96\046\uff96\047\uff96\050" +
    "\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96" +
    "\064\uff96\001\002\000\006\003\361\061\362\001\002\000" +
    "\104\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\026\ufff4" +
    "\027\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\046\ufff4\047" +
    "\015\050\ufff4\051\ufff4\052\134\053\ufff4\054\ufff4\055\ufff4" +
    "\064\ufff4\001\002\000\046\003\356\004\007\005\035\006" +
    "\045\007\111\010\063\011\077\012\022\013\012\014\073" +
    "\015\016\016\010\034\135\046\102\047\015\050\121\052" +
    "\134\061\357\001\002\000\104\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\026\ufff8\027\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\055\ufff8\064\ufff8\001\002\000\134\003" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\001\002" +
    "\000\110\002\uffff\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\026\ufff6\027\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\061\354\064\ufff6\001\002\000\112\003\uff94" +
    "\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027" +
    "\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055" +
    "\uff94\056\uff94\064\uff94\001\002\000\134\003\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\061\uffda\062\uffda\063\uffda\064\uffda\001\002\000\134\003" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002" +
    "\000\130\003\uff6f\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010" +
    "\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f" +
    "\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025" +
    "\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f" +
    "\034\uff6f\036\143\037\153\040\142\041\144\042\151\046" +
    "\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f" +
    "\055\uff6f\056\uff6f\061\162\063\145\064\uff6f\001\002\000" +
    "\114\003\uff6d\004\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d" +
    "\011\uff6d\012\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d\017" +
    "\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d" +
    "\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034" +
    "\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d" +
    "\054\uff6d\055\uff6d\056\uff6d\061\353\064\uff6d\001\002\000" +
    "\004\034\344\001\002\000\106\002\000\003\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\026\ufffb\027\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\055\ufffb\064\ufffb\001\002\000" +
    "\104\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\026\ufff2" +
    "\027\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\046\ufff2\047" +
    "\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2" +
    "\064\ufff2\001\002\000\044\004\007\005\035\006\045\007" +
    "\111\010\063\011\077\012\022\013\012\014\073\015\016" +
    "\016\010\034\135\046\102\047\015\050\303\051\304\052" +
    "\134\001\002\000\042\004\007\005\035\006\045\007\111" +
    "\010\063\011\077\012\022\013\012\014\073\015\016\016" +
    "\010\034\135\046\102\047\015\050\266\052\134\001\002" +
    "\000\004\034\213\001\002\000\134\003\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\064\uffd7\001\002\000\134\003\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\001\002\000" +
    "\104\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\026\uffbf" +
    "\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\064\uffbf\001\002\000\070\004\007\005\035\006\045\007" +
    "\111\010\063\011\077\012\022\013\012\014\073\015\016" +
    "\016\010\017\036\020\066\021\113\022\071\023\025\024" +
    "\053\027\017\031\043\032\057\034\027\046\102\047\015" +
    "\050\121\052\072\054\070\055\026\001\002\000\070\004" +
    "\007\005\035\006\045\007\111\010\063\011\077\012\022" +
    "\013\012\014\073\015\016\016\010\017\036\020\066\021" +
    "\113\022\071\023\025\024\053\027\017\031\043\032\057" +
    "\034\027\046\102\047\015\050\121\052\072\054\070\055" +
    "\026\001\002\000\136\003\uffd6\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\205\036\uffd6\037\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\046\204\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\001\002\000\006\003\167\050" +
    "\170\001\002\000\046\004\uff89\005\uff89\006\uff89\007\uff89" +
    "\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016" +
    "\uff89\034\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89" +
    "\061\uff89\001\002\000\074\003\122\004\007\005\035\006" +
    "\045\007\111\010\063\011\077\012\022\013\012\014\073" +
    "\015\016\016\010\017\036\020\066\021\113\022\071\023" +
    "\025\024\053\027\017\031\043\032\057\034\027\046\102" +
    "\047\015\050\121\052\072\053\117\054\070\055\026\001" +
    "\002\000\012\034\uffee\051\uffee\052\uffee\062\uffee\001\002" +
    "\000\104\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\026" +
    "\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\064\ufffa\001\002\000\104\003\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\026\ufff9\027\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\054\ufff9\055\ufff9\064\ufff9\001\002\000\134\003" +
    "\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\001\002" +
    "\000\012\034\ufff1\051\ufff1\052\ufff1\062\ufff1\001\002\000" +
    "\104\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0" +
    "\027\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\064\uffc0\001\002\000\112\003\uff91\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91" +
    "\032\uff91\033\uff91\034\uff91\046\uff91\047\uff91\050\uff91\051" +
    "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\064\uff91" +
    "\001\002\000\004\034\116\001\002\000\112\003\uff98\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98" +
    "\056\uff98\064\uff98\001\002\000\112\003\uff9b\004\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b" +
    "\064\uff9b\001\002\000\104\003\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\026\ufff3\027\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\064\ufff3\001\002\000\112\003\uff79" +
    "\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012" +
    "\uff79\013\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79" +
    "\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027" +
    "\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\046\uff79" +
    "\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055" +
    "\uff79\056\uff79\064\uff79\001\002\000\104\003\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\026\ufffc\027\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\054\ufffc\055\ufffc\064\ufffc\001\002\000" +
    "\132\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\061\114\062\uffd3\063\uffd3\064\uffd3\001\002" +
    "\000\134\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\001\002\000\112\003\uff8f\004\uff8f\005\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\034\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\064\uff8f\001" +
    "\002\000\070\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d" +
    "\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017" +
    "\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\027\uff7d" +
    "\031\uff7d\032\uff7d\034\uff7d\046\uff7d\047\uff7d\050\uff7d\052" +
    "\uff7d\054\uff7d\055\uff7d\001\002\000\112\003\uff9e\004\uff9e" +
    "\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\064\uff9e\001\002\000\134\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\001\002\000\136\003\uffca\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\061\uffca\062\uffca\063\uffca\064\uffca\001\002" +
    "\000\134\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\001\002\000\006\003\165\053\166\001\002\000\042" +
    "\004\007\005\035\006\045\007\111\010\063\011\077\012" +
    "\022\013\012\014\073\015\016\016\010\034\135\046\102" +
    "\047\015\050\121\052\134\001\002\000\134\003\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\001\002\000\114" +
    "\003\uff6f\004\007\005\035\006\045\007\111\010\063\011" +
    "\077\012\022\013\012\014\073\015\016\016\010\017\uff6f" +
    "\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\027\uff6f\031" +
    "\uff6f\032\uff6f\034\135\036\143\037\153\040\142\041\144" +
    "\042\151\046\102\047\015\050\121\052\134\053\uffcc\054" +
    "\uff6f\055\uff6f\061\162\062\147\063\145\001\002\000\004" +
    "\053\161\001\002\000\004\034\116\001\002\000\102\003" +
    "\uff9f\004\007\005\035\006\045\007\111\010\063\011\077" +
    "\012\022\013\012\014\073\015\016\016\010\017\036\020" +
    "\066\021\113\022\071\023\025\024\053\025\uff9f\027\017" +
    "\030\uff9f\031\043\032\057\034\027\046\102\047\015\050" +
    "\121\052\072\053\uff9f\054\070\055\026\056\uff9f\001\002" +
    "\000\014\003\uffa0\025\uffa0\030\uffa0\053\uffa0\056\uffa0\001" +
    "\002\000\004\035\131\001\002\000\042\004\007\005\035" +
    "\006\045\007\111\010\063\011\077\012\022\013\012\014" +
    "\073\015\016\016\010\034\135\046\102\047\015\050\121" +
    "\052\134\001\002\000\134\003\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\036\143\037\153\040\142\041" +
    "\144\042\151\043\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\061\uffb9\062" +
    "\uffb9\063\145\064\uffb9\001\002\000\134\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\064\uffd3\001\002\000\046\003" +
    "\122\004\007\005\035\006\045\007\111\010\063\011\077" +
    "\012\022\013\012\014\073\015\016\016\010\034\135\046" +
    "\102\047\015\050\121\052\134\053\117\001\002\000\136" +
    "\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\046\uffca\047\uffca\050\136\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\061\uffca\062\uffca\063\uffca\064" +
    "\uffca\001\002\000\044\004\007\005\035\006\045\007\111" +
    "\010\063\011\077\012\022\013\012\014\073\015\016\016" +
    "\010\034\135\046\102\047\015\050\121\051\140\052\134" +
    "\001\002\000\004\051\160\001\002\000\134\003\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\001\002\000\064" +
    "\004\007\005\035\006\045\007\111\010\063\011\077\012" +
    "\022\013\012\014\073\015\016\016\010\034\135\036\143" +
    "\037\153\040\142\041\144\042\151\046\102\047\015\050" +
    "\121\051\uffcc\052\134\053\uffcc\062\147\063\145\001\002" +
    "\000\134\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\001\002\000\134\003\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\001\002\000\134\003\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\001\002\000\134\003\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000" +
    "\022\036\143\037\153\040\142\041\144\042\151\051\uffce" +
    "\053\uffce\063\145\001\002\000\046\004\007\005\035\006" +
    "\045\007\111\010\063\011\077\012\022\013\012\014\073" +
    "\015\016\016\010\034\135\046\102\047\015\050\121\051" +
    "\uffcd\052\134\053\uffcd\001\002\000\134\003\uffdc\004\007" +
    "\005\035\006\045\007\111\010\063\011\077\012\022\013" +
    "\012\014\073\015\016\016\010\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\135\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\046\102\047\015\050" +
    "\121\051\uffdc\052\134\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\064\uffdc\001\002\000\134\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\001\002" +
    "\000\006\051\uffcf\053\uffcf\001\002\000\134\003\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\001\002\000\134" +
    "\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\036\143\037\153\040\142\041\144\042\151\043\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\061\uffe1\062\uffe1\063\145\064\uffe1\001" +
    "\002\000\024\036\143\037\153\040\142\041\144\042\151" +
    "\051\uffcc\053\uffcc\062\156\063\145\001\002\000\042\004" +
    "\007\005\035\006\045\007\111\010\063\011\077\012\022" +
    "\013\012\014\073\015\016\016\010\034\135\046\102\047" +
    "\015\050\121\052\134\001\002\000\006\051\uffcb\053\uffcb" +
    "\001\002\000\134\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\064\uffd4\001\002\000\134\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\001\002\000\112\003\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\046\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\064\uff9c\001\002\000\020\036\143\037\153\040" +
    "\142\041\144\042\151\051\164\063\145\001\002\000\134" +
    "\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\046" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\001" +
    "\002\000\112\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c" +
    "\053\uff8c\054\uff8c\055\uff8c\056\uff8c\064\uff8c\001\002\000" +
    "\112\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d" +
    "\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\056\uff8d\064\uff8d\001\002\000\006\003" +
    "\uff59\061\uff59\001\002\000\044\004\007\005\035\006\045" +
    "\007\111\010\063\011\077\012\022\013\012\014\073\015" +
    "\016\016\010\034\135\046\102\047\015\050\121\051\173" +
    "\052\134\001\002\000\052\003\uff85\004\007\005\035\006" +
    "\045\007\111\010\063\011\077\012\022\013\012\014\073" +
    "\015\016\016\010\034\135\046\102\047\015\050\121\051" +
    "\uff85\052\134\061\uff85\062\202\001\002\000\004\051\177" +
    "\001\002\000\006\003\uff80\061\uff80\001\002\000\064\003" +
    "\uff82\004\007\005\035\006\045\007\111\010\063\011\077" +
    "\012\022\013\012\014\073\015\016\016\010\034\135\036" +
    "\143\037\153\040\142\041\144\042\151\046\102\047\015" +
    "\050\121\051\uffcc\052\134\062\147\063\145\001\002\000" +
    "\004\003\176\001\002\000\006\003\uff5a\061\uff5a\001\002" +
    "\000\006\003\uff81\061\uff81\001\002\000\012\003\uff83\051" +
    "\uff83\052\uff83\061\uff83\001\002\000\066\003\uff82\004\uff82" +
    "\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\013" +
    "\uff82\014\uff82\015\uff82\016\uff82\034\uff82\036\143\037\153" +
    "\040\142\041\144\042\151\046\uff82\047\uff82\050\uff82\051" +
    "\uff82\052\uff82\061\uff82\062\uff82\063\145\001\002\000\042" +
    "\004\007\005\035\006\045\007\111\010\063\011\077\012" +
    "\022\013\012\014\073\015\016\016\010\034\135\046\102" +
    "\047\015\050\121\052\134\001\002\000\012\003\uff84\051" +
    "\uff84\052\uff84\061\uff84\001\002\000\134\003\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\043\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\064\uffdf\001\002\000\044\003" +
    "\207\004\007\005\035\006\045\007\111\010\063\011\077" +
    "\012\022\013\012\014\073\015\016\016\010\034\135\046" +
    "\102\047\015\050\121\052\134\001\002\000\134\003\uffba" +
    "\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036\143" +
    "\037\153\040\142\041\144\042\151\043\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\061\uffba\062\uffba\063\145\064\uffba\001\002\000" +
    "\134\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7" +
    "\001\002\000\112\003\uff90\004\uff90\005\uff90\006\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024" +
    "\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90" +
    "\033\uff90\034\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052" +
    "\uff90\053\uff90\054\uff90\055\uff90\056\uff90\064\uff90\001\002" +
    "\000\112\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053" +
    "\uff99\054\uff99\055\uff99\056\uff99\064\uff99\001\002\000\112" +
    "\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\131\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\061\263\062\261\064\uffc9\001\002\000\112\003\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\046\uffca\047\uffca" +
    "\050\220\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\061" +
    "\uffca\062\uffca\064\uffca\001\002\000\004\061\uffc5\001\002" +
    "\000\004\061\216\001\002\000\104\003\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\064\uffc4\001\002\000\020" +
    "\011\077\012\022\013\012\014\073\015\016\016\010\034" +
    "\116\001\002\000\024\011\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\034\uffb5\051\uffb6\052\uffb6\001\002\000" +
    "\004\051\222\001\002\000\004\052\223\001\002\000\076" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\031" +
    "\uffa3\032\uffa3\034\uffa3\046\uffa3\047\uffa3\050\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\064\uffa3\001\002\000\076\004" +
    "\007\005\035\006\045\007\111\010\063\011\077\012\022" +
    "\013\012\014\073\015\016\016\010\017\036\020\066\021" +
    "\113\022\071\023\025\024\053\026\011\027\017\031\043" +
    "\032\057\034\027\046\102\047\015\050\121\052\072\053" +
    "\226\054\070\055\026\064\056\001\002\000\102\003\uffa4" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\027\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\064\uffa4\001\002\000" +
    "\106\002\uff6a\003\uff6a\004\uff6a\005\uff6a\006\uff6a\007\uff6a" +
    "\010\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016" +
    "\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a" +
    "\026\uff6a\027\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\046" +
    "\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a" +
    "\055\uff6a\064\uff6a\001\002\000\004\034\116\001\002\000" +
    "\102\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1" +
    "\027\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\064\uffa1" +
    "\001\002\000\102\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\026\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\064\uffa2\001\002\000\006\051\233\052\234\001\002" +
    "\000\076\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027" +
    "\uffa3\031\uffa3\032\uffa3\034\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\052\237\053\uffa3\054\uffa3\055\uffa3\064\uffa3\001\002\000" +
    "\076\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3" +
    "\031\uffa3\032\uffa3\034\uffa3\046\uffa3\047\uffa3\050\uffa3\052" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\064\uffa3\001\002\000\076" +
    "\004\007\005\035\006\045\007\111\010\063\011\077\012" +
    "\022\013\012\014\073\015\016\016\010\017\036\020\066" +
    "\021\113\022\071\023\025\024\053\026\011\027\017\031" +
    "\043\032\057\034\027\046\102\047\015\050\121\052\072" +
    "\053\236\054\070\055\026\064\056\001\002\000\106\002" +
    "\uff6b\003\uff6b\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b" +
    "\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\016\uff6b\017" +
    "\uff6b\020\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b\026\uff6b" +
    "\027\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\046\uff6b\047" +
    "\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b" +
    "\064\uff6b\001\002\000\102\003\uffa3\004\uffa3\005\uffa3\006" +
    "\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\026\uffa3\027\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\046\uffa3\047\uffa3\050\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\064\uffa3\001\002\000\076\004\007\005\035" +
    "\006\045\007\111\010\063\011\077\012\022\013\012\014" +
    "\073\015\016\016\010\017\036\020\066\021\113\022\071" +
    "\023\025\024\053\026\011\027\017\031\043\032\057\034" +
    "\027\046\102\047\015\050\121\052\072\053\241\054\070" +
    "\055\026\064\056\001\002\000\106\002\uff69\003\uff69\004" +
    "\uff69\005\uff69\006\uff69\007\uff69\010\uff69\011\uff69\012\uff69" +
    "\013\uff69\014\uff69\015\uff69\016\uff69\017\uff69\020\uff69\021" +
    "\uff69\022\uff69\023\uff69\024\uff69\026\uff69\027\uff69\031\uff69" +
    "\032\uff69\033\uff69\034\uff69\046\uff69\047\uff69\050\uff69\051" +
    "\uff69\052\uff69\053\uff69\054\uff69\055\uff69\064\uff69\001\002" +
    "\000\102\003\244\004\007\005\035\006\045\007\111\010" +
    "\063\011\077\012\022\013\012\014\073\015\016\016\010" +
    "\017\036\020\066\021\113\022\071\023\025\024\053\026" +
    "\011\027\017\031\043\032\057\033\054\034\027\046\102" +
    "\047\015\050\121\052\072\053\243\054\070\055\026\064" +
    "\056\001\002\000\106\002\uffa7\003\uffa7\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\026\uffa7\027\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\034\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\054\uffa7\055\uffa7\064\uffa7\001\002\000\106\002" +
    "\uff67\003\uff67\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67" +
    "\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67\016\uff67\017" +
    "\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67\026\uff67" +
    "\027\uff67\031\uff67\032\uff67\033\uff67\034\uff67\046\uff67\047" +
    "\uff67\050\uff67\051\uff67\052\uff67\053\246\054\uff67\055\uff67" +
    "\064\uff67\001\002\000\106\002\uff68\003\uff68\004\uff68\005" +
    "\uff68\006\uff68\007\uff68\010\uff68\011\uff68\012\uff68\013\uff68" +
    "\014\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021\uff68\022" +
    "\uff68\023\uff68\024\uff68\026\uff68\027\uff68\031\uff68\032\uff68" +
    "\033\uff68\034\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052" +
    "\uff68\053\uff68\054\uff68\055\uff68\064\uff68\001\002\000\106" +
    "\002\uff66\003\uff66\004\uff66\005\uff66\006\uff66\007\uff66\010" +
    "\uff66\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66" +
    "\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66\026" +
    "\uff66\027\uff66\031\uff66\032\uff66\033\uff66\034\uff66\046\uff66" +
    "\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054\uff66\055" +
    "\uff66\064\uff66\001\002\000\012\034\116\051\uffad\052\uffad" +
    "\062\uffad\001\002\000\010\051\uffae\052\uffae\062\uffae\001" +
    "\002\000\010\051\uffb2\052\uffb2\062\254\001\002\000\006" +
    "\051\uffb4\052\uffb4\001\002\000\010\051\uffaf\052\uffaf\062" +
    "\uffaf\001\002\000\020\011\077\012\022\013\012\014\073" +
    "\015\016\016\010\034\116\001\002\000\006\051\uffb3\052" +
    "\uffb3\001\002\000\010\051\uffb2\052\uffb2\062\254\001\002" +
    "\000\006\051\uffb1\052\uffb1\001\002\000\010\051\uffb0\052" +
    "\uffb0\062\uffb0\001\002\000\004\034\116\001\002\000\004" +
    "\061\uffbd\001\002\000\104\003\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\064\uffc3\001\002\000\006\061\uffbc" +
    "\062\261\001\002\000\004\061\uffbb\001\002\000\042\004" +
    "\007\005\035\006\045\007\111\010\063\011\077\012\022" +
    "\013\012\014\073\015\016\016\010\034\135\046\102\047" +
    "\015\050\121\052\134\001\002\000\016\036\143\037\153" +
    "\040\142\041\144\042\151\063\145\001\002\000\020\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\051\271\063\uffd7" +
    "\001\002\000\070\004\007\005\035\006\045\007\111\010" +
    "\063\011\077\012\022\013\012\014\073\015\016\016\010" +
    "\017\036\020\066\021\113\022\071\023\025\024\053\027" +
    "\017\031\043\032\057\034\027\046\102\047\015\050\121" +
    "\052\072\054\070\055\026\001\002\000\112\003\uff5e\004" +
    "\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e\011\uff5e\012\uff5e" +
    "\013\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021" +
    "\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e" +
    "\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\046\uff5e\047" +
    "\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\055\uff5e" +
    "\056\uff5e\064\uff5e\001\002\000\004\051\301\001\002\000" +
    "\022\036\143\037\153\040\142\041\144\042\151\043\277" +
    "\051\164\063\145\001\002\000\110\004\007\005\035\006" +
    "\045\007\111\010\063\011\077\012\022\013\012\014\073" +
    "\015\016\016\010\017\036\020\066\021\113\022\071\023" +
    "\025\024\053\027\017\031\043\032\057\034\027\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\046\102\047" +
    "\015\050\121\051\uffd7\052\072\054\070\055\026\063\uffd7" +
    "\001\002\000\112\003\uff5d\004\uff5d\005\uff5d\006\uff5d\007" +
    "\uff5d\010\uff5d\011\uff5d\012\uff5d\013\uff5d\014\uff5d\015\uff5d" +
    "\016\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d\024" +
    "\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d" +
    "\033\uff5d\034\uff5d\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052" +
    "\uff5d\053\uff5d\054\uff5d\055\uff5d\056\uff5d\064\uff5d\001\002" +
    "\000\042\004\007\005\035\006\045\007\111\010\063\011" +
    "\077\012\022\013\012\014\073\015\016\016\010\034\135" +
    "\046\102\047\015\050\121\052\134\001\002\000\020\036" +
    "\143\037\153\040\142\041\144\042\151\051\uff8a\063\145" +
    "\001\002\000\070\004\uff88\005\uff88\006\uff88\007\uff88\010" +
    "\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\027" +
    "\uff88\031\uff88\032\uff88\034\uff88\046\uff88\047\uff88\050\uff88" +
    "\052\uff88\054\uff88\055\uff88\001\002\000\004\052\341\001" +
    "\002\000\044\003\310\004\007\005\035\006\045\007\111" +
    "\010\063\011\077\012\022\013\012\014\073\015\016\016" +
    "\010\034\135\046\102\047\015\050\121\052\134\001\002" +
    "\000\006\052\uff63\061\uff63\001\002\000\010\051\306\052" +
    "\uff61\061\uff61\001\002\000\006\052\uff64\061\uff64\001\002" +
    "\000\062\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011" +
    "\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\034\uff82" +
    "\036\143\037\153\040\142\041\144\042\151\046\uff82\047" +
    "\uff82\050\uff82\051\333\052\uff82\062\uff82\063\145\001\002" +
    "\000\004\051\312\001\002\000\006\052\uff65\061\uff65\001" +
    "\002\000\004\052\313\001\002\000\010\025\321\030\314" +
    "\056\316\001\002\000\004\056\331\001\002\000\012\025" +
    "\uff73\030\uff73\053\uff73\056\uff73\001\002\000\070\004\007" +
    "\005\035\006\045\007\111\010\063\011\077\012\022\013" +
    "\012\014\073\015\016\016\010\017\036\020\066\021\113" +
    "\022\071\023\025\024\053\027\017\031\043\032\057\034" +
    "\027\046\102\047\015\050\121\052\072\054\070\055\026" +
    "\001\002\000\004\053\327\001\002\000\012\025\321\030" +
    "\314\053\uff77\056\316\001\002\000\042\004\007\005\035" +
    "\006\045\007\111\010\063\011\077\012\022\013\012\014" +
    "\073\015\016\016\010\034\135\046\102\047\015\050\121" +
    "\052\134\001\002\000\106\004\007\005\035\006\045\007" +
    "\111\010\063\011\077\012\022\013\012\014\073\015\016" +
    "\016\010\017\036\020\066\021\113\022\071\023\025\024" +
    "\053\027\017\031\043\032\057\034\027\036\143\037\153" +
    "\040\142\041\144\042\151\046\102\047\015\050\121\052" +
    "\072\054\070\055\026\056\323\063\145\001\002\000\100" +
    "\004\007\005\035\006\045\007\111\010\063\011\077\012" +
    "\022\013\012\014\073\015\016\016\010\017\036\020\066" +
    "\021\113\022\071\023\025\024\053\025\uff74\027\017\030" +
    "\uff74\031\043\032\057\034\027\046\102\047\015\050\121" +
    "\052\072\053\uff74\054\070\055\026\056\uff74\001\002\000" +
    "\012\025\uff52\030\uff52\053\uff52\056\uff52\001\002\000\012" +
    "\025\uff76\030\uff76\053\uff76\056\uff76\001\002\000\004\053" +
    "\uff78\001\002\000\112\003\uff54\004\uff54\005\uff54\006\uff54" +
    "\007\uff54\010\uff54\011\uff54\012\uff54\013\uff54\014\uff54\015" +
    "\uff54\016\uff54\017\uff54\020\uff54\021\uff54\022\uff54\023\uff54" +
    "\024\uff54\025\uff54\026\uff54\027\uff54\030\uff54\031\uff54\032" +
    "\uff54\033\uff54\034\uff54\046\uff54\047\uff54\050\uff54\051\uff54" +
    "\052\uff54\053\uff54\054\uff54\055\uff54\056\uff54\064\uff54\001" +
    "\002\000\012\025\uff51\030\uff51\053\uff51\056\uff51\001\002" +
    "\000\100\004\007\005\035\006\045\007\111\010\063\011" +
    "\077\012\022\013\012\014\073\015\016\016\010\017\036" +
    "\020\066\021\113\022\071\023\025\024\053\025\uff50\027" +
    "\017\030\uff50\031\043\032\057\034\027\046\102\047\015" +
    "\050\121\052\072\053\uff50\054\070\055\026\056\uff50\001" +
    "\002\000\012\025\uff75\030\uff75\053\uff75\056\uff75\001\002" +
    "\000\070\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\025\321" +
    "\030\314\034\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\334\056\316" +
    "\062\uffdb\063\uffdb\001\002\000\010\025\321\030\314\056" +
    "\316\001\002\000\004\053\336\001\002\000\112\003\uff53" +
    "\004\uff53\005\uff53\006\uff53\007\uff53\010\uff53\011\uff53\012" +
    "\uff53\013\uff53\014\uff53\015\uff53\016\uff53\017\uff53\020\uff53" +
    "\021\uff53\022\uff53\023\uff53\024\uff53\025\uff53\026\uff53\027" +
    "\uff53\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53\046\uff53" +
    "\047\uff53\050\uff53\051\uff53\052\uff53\053\uff53\054\uff53\055" +
    "\uff53\056\uff53\064\uff53\001\002\000\004\053\340\001\002" +
    "\000\112\003\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010" +
    "\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a" +
    "\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025" +
    "\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\034\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053" +
    "\uff7a\054\uff7a\055\uff7a\056\uff7a\064\uff7a\001\002\000\010" +
    "\025\321\030\314\056\316\001\002\000\004\053\343\001" +
    "\002\000\112\003\uff55\004\uff55\005\uff55\006\uff55\007\uff55" +
    "\010\uff55\011\uff55\012\uff55\013\uff55\014\uff55\015\uff55\016" +
    "\uff55\017\uff55\020\uff55\021\uff55\022\uff55\023\uff55\024\uff55" +
    "\025\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033" +
    "\uff55\034\uff55\046\uff55\047\uff55\050\uff55\051\uff55\052\uff55" +
    "\053\uff55\054\uff55\055\uff55\056\uff55\064\uff55\001\002\000" +
    "\004\050\345\001\002\000\022\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\034\uffb5\051\uffb6\001\002\000" +
    "\004\051\347\001\002\000\004\052\350\001\002\000\076" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\031" +
    "\uffa3\032\uffa3\034\uffa3\046\uffa3\047\uffa3\050\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\064\uffa3\001\002\000\076\004" +
    "\007\005\035\006\045\007\111\010\063\011\077\012\022" +
    "\013\012\014\073\015\016\016\010\017\036\020\066\021" +
    "\113\022\071\023\025\024\053\026\011\027\017\031\043" +
    "\032\057\034\027\046\102\047\015\050\121\052\072\053" +
    "\352\054\070\055\026\064\056\001\002\000\106\002\uffa6" +
    "\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\064" +
    "\uffa6\001\002\000\112\003\uff93\004\uff93\005\uff93\006\uff93" +
    "\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015" +
    "\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\033\uff93\034\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\064\uff93\001" +
    "\002\000\104\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\026\ufff5\027\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\064\ufff5\001\002\000\130\003\uffa9\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036\143\037\153\040" +
    "\142\041\144\042\151\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\061\360\063" +
    "\145\064\uffa9\001\002\000\112\003\uffa8\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\064" +
    "\uffa8\001\002\000\112\003\uffab\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032" +
    "\uffab\033\uffab\034\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\064\uffab\001" +
    "\002\000\112\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\056\uffac\064\uffac\001\002\000" +
    "\112\003\uff6e\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e" +
    "\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017" +
    "\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e" +
    "\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034" +
    "\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e" +
    "\054\uff6e\055\uff6e\056\uff6e\064\uff6e\001\002\000\112\003" +
    "\uff95\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\046" +
    "\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95" +
    "\055\uff95\056\uff95\064\uff95\001\002\000\042\004\007\005" +
    "\035\006\045\007\111\010\063\011\077\012\022\013\012" +
    "\014\073\015\016\016\010\034\135\046\102\047\015\050" +
    "\121\052\134\001\002\000\004\051\366\001\002\000\020" +
    "\036\143\037\153\040\142\041\144\042\151\043\277\063" +
    "\145\001\002\000\070\004\007\005\035\006\045\007\111" +
    "\010\063\011\077\012\022\013\012\014\073\015\016\016" +
    "\010\017\036\020\066\021\113\022\071\023\025\024\053" +
    "\027\017\031\043\032\057\034\027\046\102\047\015\050" +
    "\121\052\072\054\070\055\026\001\002\000\112\003\uff8b" +
    "\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\046\uff8b" +
    "\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055" +
    "\uff8b\056\uff8b\064\uff8b\001\002\000\112\003\uff87\004\uff87" +
    "\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013" +
    "\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87" +
    "\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\046\uff87\047\uff87" +
    "\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056" +
    "\uff87\064\uff87\001\002\000\070\004\uff8e\005\uff8e\006\uff8e" +
    "\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015" +
    "\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\024\uff8e\027\uff8e\031\uff8e\032\uff8e\034\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\052\uff8e\054\uff8e\055\uff8e\001\002\000\004" +
    "\004\373\001\002\000\114\003\uff70\004\uff70\005\uff70\006" +
    "\uff70\007\uff70\010\uff70\011\uff70\012\uff70\013\uff70\014\uff70" +
    "\015\uff70\016\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023" +
    "\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70" +
    "\032\uff70\033\uff70\034\uff70\046\uff70\047\uff70\050\uff70\051" +
    "\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70\061\374" +
    "\064\uff70\001\002\000\112\003\uff9d\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\046\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\064\uff9d" +
    "\001\002\000\006\003\uff58\061\uff58\001\002\000\044\004" +
    "\007\005\035\006\045\007\111\010\063\011\077\012\022" +
    "\013\012\014\073\015\016\016\010\034\135\046\102\047" +
    "\015\050\121\051\u0100\052\134\001\002\000\004\051\u0103" +
    "\001\002\000\006\003\uff56\061\uff56\001\002\000\004\003" +
    "\u0102\001\002\000\006\003\uff57\061\uff57\001\002\000\006" +
    "\003\uff7f\061\uff7f\001\002\000\004\035\205\001\002\000" +
    "\004\061\u0116\001\002\000\022\003\u0108\011\077\012\022" +
    "\013\012\014\073\015\016\016\010\034\116\001\002\000" +
    "\004\061\u010f\001\002\000\006\051\u0109\061\u010a\001\002" +
    "\000\070\004\007\005\035\006\045\007\111\010\063\011" +
    "\077\012\022\013\012\014\073\015\016\016\010\017\036" +
    "\020\066\021\113\022\071\023\025\024\053\027\017\031" +
    "\043\032\057\034\027\046\102\047\015\050\121\052\072" +
    "\054\070\055\026\001\002\000\004\003\u010b\001\002\000" +
    "\004\051\u010c\001\002\000\070\004\007\005\035\006\045" +
    "\007\111\010\063\011\077\012\022\013\012\014\073\015" +
    "\016\016\010\017\036\020\066\021\113\022\071\023\025" +
    "\024\053\027\017\031\043\032\057\034\027\046\102\047" +
    "\015\050\121\052\072\054\070\055\026\001\002\000\112" +
    "\003\uff4b\004\uff4b\005\uff4b\006\uff4b\007\uff4b\010\uff4b\011" +
    "\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b" +
    "\020\uff4b\021\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b\026" +
    "\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b" +
    "\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054" +
    "\uff4b\055\uff4b\056\uff4b\064\uff4b\001\002\000\112\003\uff4c" +
    "\004\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c\011\uff4c\012" +
    "\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\017\uff4c\020\uff4c" +
    "\021\uff4c\022\uff4c\023\uff4c\024\uff4c\025\uff4c\026\uff4c\027" +
    "\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c\046\uff4c" +
    "\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c\055" +
    "\uff4c\056\uff4c\064\uff4c\001\002\000\042\004\007\005\035" +
    "\006\045\007\111\010\063\011\077\012\022\013\012\014" +
    "\073\015\016\016\010\034\135\046\102\047\015\050\121" +
    "\052\134\001\002\000\020\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\061\u0111\063\uffd7\001\002\000\042\004\007" +
    "\005\035\006\045\007\111\010\063\011\077\012\022\013" +
    "\012\014\073\015\016\016\010\034\135\046\102\047\015" +
    "\050\121\052\134\001\002\000\106\004\007\005\035\006" +
    "\045\007\111\010\063\011\077\012\022\013\012\014\073" +
    "\015\016\016\010\017\036\020\066\021\113\022\071\023" +
    "\025\024\053\027\017\031\043\032\057\034\027\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\046\102\047\015\050" +
    "\121\051\u0114\052\072\054\070\055\026\063\uffd7\001\002" +
    "\000\112\003\uff4e\004\uff4e\005\uff4e\006\uff4e\007\uff4e\010" +
    "\uff4e\011\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e" +
    "\017\uff4e\020\uff4e\021\uff4e\022\uff4e\023\uff4e\024\uff4e\025" +
    "\uff4e\026\uff4e\027\uff4e\030\uff4e\031\uff4e\032\uff4e\033\uff4e" +
    "\034\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e\053" +
    "\uff4e\054\uff4e\055\uff4e\056\uff4e\064\uff4e\001\002\000\070" +
    "\004\007\005\035\006\045\007\111\010\063\011\077\012" +
    "\022\013\012\014\073\015\016\016\010\017\036\020\066" +
    "\021\113\022\071\023\025\024\053\027\017\031\043\032" +
    "\057\034\027\046\102\047\015\050\121\052\072\054\070" +
    "\055\026\001\002\000\112\003\uff72\004\uff72\005\uff72\006" +
    "\uff72\007\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72" +
    "\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023" +
    "\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\046\uff72\047\uff72\050\uff72\051" +
    "\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72\064\uff72" +
    "\001\002\000\042\004\007\005\035\006\045\007\111\010" +
    "\063\011\077\012\022\013\012\014\073\015\016\016\010" +
    "\034\135\046\102\047\015\050\121\052\134\001\002\000" +
    "\020\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\061\u0118" +
    "\063\uffd7\001\002\000\042\004\007\005\035\006\045\007" +
    "\111\010\063\011\077\012\022\013\012\014\073\015\016" +
    "\016\010\034\135\046\102\047\015\050\121\052\134\001" +
    "\002\000\106\004\007\005\035\006\045\007\111\010\063" +
    "\011\077\012\022\013\012\014\073\015\016\016\010\017" +
    "\036\020\066\021\113\022\071\023\025\024\053\027\017" +
    "\031\043\032\057\034\027\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\046\102\047\015\050\121\051\u011b\052\072" +
    "\054\070\055\026\063\uffd7\001\002\000\112\003\uff4d\004" +
    "\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d\011\uff4d\012\uff4d" +
    "\013\uff4d\014\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d\021" +
    "\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d\026\uff4d\027\uff4d" +
    "\030\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\046\uff4d\047" +
    "\uff4d\050\uff4d\051\uff4d\052\uff4d\053\uff4d\054\uff4d\055\uff4d" +
    "\056\uff4d\064\uff4d\001\002\000\070\004\007\005\035\006" +
    "\045\007\111\010\063\011\077\012\022\013\012\014\073" +
    "\015\016\016\010\017\036\020\066\021\113\022\071\023" +
    "\025\024\053\027\017\031\043\032\057\034\027\046\102" +
    "\047\015\050\121\052\072\054\070\055\026\001\002\000" +
    "\112\003\uff4f\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f" +
    "\011\uff4f\012\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f\017" +
    "\uff4f\020\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f\025\uff4f" +
    "\026\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f\033\uff4f\034" +
    "\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f\052\uff4f\053\uff4f" +
    "\054\uff4f\055\uff4f\056\uff4f\064\uff4f\001\002\000\104\003" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7\027\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\064\ufff7" +
    "\001\002\000\004\022\071\001\002\000\046\004\007\005" +
    "\035\006\045\007\111\010\063\011\077\012\022\013\012" +
    "\014\073\015\016\016\010\034\135\046\102\047\015\050" +
    "\u0121\051\304\052\134\061\uff60\001\002\000\004\061\u0126" +
    "\001\002\000\044\004\007\005\035\006\045\007\111\010" +
    "\063\011\077\012\022\013\012\014\073\015\016\016\010" +
    "\034\135\046\102\047\015\050\121\052\134\061\uff62\001" +
    "\002\000\064\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82" +
    "\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\034" +
    "\uff82\036\143\037\153\040\142\041\144\042\151\046\uff82" +
    "\047\uff82\050\uff82\051\164\052\uff82\061\uff82\062\uff82\063" +
    "\145\001\002\000\064\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\u0124\052\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\001\002\000\114\003\uff5b\004\uff5b\005\uff5b" +
    "\006\uff5b\007\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b\014" +
    "\uff5b\015\uff5b\016\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b" +
    "\023\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b\031" +
    "\uff5b\032\uff5b\033\uff5b\034\uff5b\046\uff5b\047\uff5b\050\uff5b" +
    "\051\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b\056\uff5b\061" +
    "\u0125\064\uff5b\001\002\000\112\003\uff7c\004\uff7c\005\uff7c" +
    "\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031" +
    "\uff7c\032\uff7c\033\uff7c\034\uff7c\046\uff7c\047\uff7c\050\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\064" +
    "\uff7c\001\002\000\112\003\uff5c\004\uff5c\005\uff5c\006\uff5c" +
    "\007\uff5c\010\uff5c\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015" +
    "\uff5c\016\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c" +
    "\024\uff5c\025\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032" +
    "\uff5c\033\uff5c\034\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c" +
    "\052\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c\064\uff5c\001" +
    "\002\000\112\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92" +
    "\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033" +
    "\uff92\034\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\055\uff92\056\uff92\064\uff92\001\002\000" +
    "\134\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\001\002\000\004\034\u012a\001\002\000\106\003\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\116\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\061\u012b\064\uffc7" +
    "\001\002\000\104\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\026\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\064\uffc1\001\002\000\106\003\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\061\u012f\064\uffc8\001" +
    "\002\000\004\061\u012e\001\002\000\104\003\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\064\uffc6\001\002\000" +
    "\104\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2" +
    "\027\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\064\uffc2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\006\011\003\034\004\001\001\000\114\003" +
    "\074\004\106\006\057\007\047\010\060\015\054\017\107" +
    "\020\012\021\066\023\051\024\061\027\077\030\022\032" +
    "\023\035\103\036\030\037\046\040\102\041\040\044\100" +
    "\046\036\051\037\054\032\056\111\057\027\060\043\061" +
    "\073\062\063\063\017\066\013\067\033\070\105\072\075" +
    "\073\050\074\020\076\064\077\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\u0128\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\047\010\124\017\132" +
    "\020\012\021\066\023\u0127\024\061\072\075\073\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\003\u011d\006\057\007\047\010\124\017\107\020" +
    "\012\021\066\023\051\024\061\030\022\035\103\036\030" +
    "\037\046\040\102\041\040\044\100\046\036\051\037\056" +
    "\111\057\027\063\017\066\013\067\033\070\105\072\075" +
    "\073\050\074\020\076\064\077\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\124" +
    "\017\u0104\021\u0103\073\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\003\367\006\057\007\047\010\124\017\107\020\012\021" +
    "\066\023\051\024\061\030\022\035\103\036\030\037\046" +
    "\040\102\041\040\044\100\046\036\051\037\056\111\057" +
    "\027\063\017\066\013\067\033\070\105\072\075\073\050" +
    "\074\020\076\064\077\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\047\010\124\017\132\020\012\021\066\023\162\024\061" +
    "\072\075\073\050\001\001\000\024\007\047\010\124\017" +
    "\132\020\012\021\066\023\354\024\061\072\075\073\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\047" +
    "\010\124\017\132\020\012\021\066\023\200\024\061\042" +
    "\304\043\170\065\301\072\075\073\050\001\001\000\024" +
    "\007\047\010\124\017\132\020\012\021\066\023\266\024" +
    "\267\072\075\073\050\001\001\000\006\021\211\100\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\003\210\006\057\007\047\010\124\017\107" +
    "\020\012\021\066\023\051\024\061\030\022\035\103\036" +
    "\030\037\046\040\102\041\040\044\100\046\036\051\037" +
    "\056\111\057\027\063\017\066\013\067\033\070\105\072" +
    "\075\073\050\074\020\076\064\077\031\001\001\000\074" +
    "\003\207\006\057\007\047\010\124\017\107\020\012\021" +
    "\066\023\051\024\061\030\022\035\103\036\030\037\046" +
    "\040\102\041\040\044\100\046\036\051\037\056\111\057" +
    "\027\063\017\066\013\067\033\070\105\072\075\073\050" +
    "\074\020\076\064\077\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\002\117\003\125" +
    "\006\057\007\047\010\124\017\107\020\012\021\066\023" +
    "\122\024\061\030\022\035\103\036\030\037\046\040\102" +
    "\041\040\044\100\046\036\051\037\056\111\057\027\063" +
    "\017\066\013\067\033\070\105\072\075\073\050\074\020" +
    "\076\064\077\031\105\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\047\010\124" +
    "\017\132\020\012\021\066\023\162\024\061\072\075\073" +
    "\050\001\001\000\002\001\001\000\030\007\047\010\124" +
    "\017\132\020\012\021\066\023\145\024\061\026\147\072" +
    "\075\073\050\106\151\001\001\000\002\001\001\000\004" +
    "\021\127\001\001\000\076\002\126\003\125\006\057\007" +
    "\047\010\124\017\107\020\012\021\066\023\051\024\061" +
    "\030\022\035\103\036\030\037\046\040\102\041\040\044" +
    "\100\046\036\051\037\056\111\057\027\063\017\066\013" +
    "\067\033\070\105\072\075\073\050\074\020\076\064\077" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\047\010\124\017\132\020\012\021\066\023\131\024" +
    "\061\072\075\073\050\001\001\000\004\026\147\001\001" +
    "\000\002\001\001\000\026\007\047\010\124\017\132\020" +
    "\012\021\066\023\140\024\061\072\075\073\050\105\123" +
    "\001\001\000\002\001\001\000\026\007\047\010\124\017" +
    "\132\020\012\021\066\023\140\024\061\072\075\073\050" +
    "\105\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\047\010\124\017\132\020\012\021\066\023\145" +
    "\024\061\026\147\072\075\073\050\106\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\147\001\001\000\024\007\047\010" +
    "\124\017\132\020\012\021\066\023\154\024\061\072\075" +
    "\073\050\001\001\000\024\007\047\010\124\017\132\020" +
    "\012\021\066\023\153\024\061\072\075\073\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\147\001\001\000\006\026\147\106\156\001\001" +
    "\000\024\007\047\010\124\017\132\020\012\021\066\023" +
    "\154\024\061\072\075\073\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\047\010" +
    "\124\017\132\020\012\021\066\023\173\024\061\042\174" +
    "\043\170\072\075\073\050\105\171\001\001\000\026\007" +
    "\047\010\124\017\132\020\012\021\066\023\200\024\061" +
    "\043\177\072\075\073\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\047\010\124\017\132\020\012" +
    "\021\066\023\145\024\061\026\147\072\075\073\050\106" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\147\001\001\000" +
    "\030\007\047\010\124\017\132\020\012\021\066\023\200" +
    "\024\061\042\202\043\170\072\075\073\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\047\010\124" +
    "\017\132\020\012\021\066\023\205\024\061\072\075\073" +
    "\050\001\001\000\004\026\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\261\001" +
    "\001\000\006\103\220\110\216\001\001\000\004\107\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\246\012\250\021\247\053\252\102\251\001\001\000\006" +
    "\103\231\110\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\223\001\001\000\104\003\227\004\230" +
    "\006\057\007\047\010\226\017\107\020\012\021\066\023" +
    "\051\024\061\027\077\030\022\035\103\036\030\037\046" +
    "\040\102\041\040\044\100\046\036\051\037\052\224\056" +
    "\111\057\027\062\063\063\017\066\013\067\033\070\105" +
    "\072\075\073\050\074\020\076\064\077\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\211\100\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\237\001\001\000\004\013\234\001\001" +
    "\000\104\003\227\004\230\006\057\007\047\010\226\017" +
    "\107\020\012\021\066\023\051\024\061\027\077\030\022" +
    "\035\103\036\030\037\046\040\102\041\040\044\100\046" +
    "\036\051\037\052\224\056\111\057\027\062\063\063\017" +
    "\066\013\067\033\070\105\072\075\073\050\074\020\076" +
    "\064\077\031\001\001\000\002\001\001\000\004\013\241" +
    "\001\001\000\104\003\227\004\230\006\057\007\047\010" +
    "\226\017\107\020\012\021\066\023\051\024\061\027\077" +
    "\030\022\035\103\036\030\037\046\040\102\041\040\044" +
    "\100\046\036\051\037\052\224\056\111\057\027\062\063" +
    "\063\017\066\013\067\033\070\105\072\075\073\050\074" +
    "\020\076\064\077\031\001\001\000\002\001\001\000\110" +
    "\003\227\004\230\006\057\007\047\010\060\015\244\017" +
    "\107\020\012\021\066\023\051\024\061\027\077\030\022" +
    "\035\103\036\030\037\046\040\102\041\040\044\100\046" +
    "\036\051\037\052\224\054\032\056\111\057\027\062\063" +
    "\063\017\066\013\067\033\070\105\072\075\073\050\074" +
    "\020\076\064\077\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\257\001\001\000\002\001\001\000\004\104\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\246\012" +
    "\255\021\247\053\252\001\001\000\002\001\001\000\004" +
    "\104\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\264\001\001\000\002\001\001\000\026\007" +
    "\047\010\124\017\132\020\012\021\066\023\273\024\274" +
    "\072\075\073\050\075\272\001\001\000\004\026\147\001" +
    "\001\000\002\001\001\000\074\003\271\006\057\007\047" +
    "\010\124\017\107\020\012\021\066\023\051\024\061\030" +
    "\022\035\103\036\030\037\046\040\102\041\040\044\100" +
    "\046\036\051\037\056\111\057\027\063\017\066\013\067" +
    "\033\070\105\072\075\073\050\074\020\076\064\077\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\147\001\001\000\074\003\275\006\057\007\047\010\124" +
    "\017\107\020\012\021\066\023\051\024\061\030\022\035" +
    "\103\036\030\037\046\040\102\041\040\044\100\046\036" +
    "\051\037\056\111\057\027\063\017\066\013\067\033\070" +
    "\105\072\075\073\050\074\020\076\064\077\031\001\001" +
    "\000\002\001\001\000\024\007\047\010\124\017\132\020" +
    "\012\021\066\023\277\024\061\072\075\073\050\001\001" +
    "\000\004\026\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\047\010\124\017\132\020\012\021\066" +
    "\023\306\024\061\042\310\043\170\072\075\073\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\047\316\050\317\071\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\002" +
    "\327\003\125\006\057\007\047\010\124\017\107\020\012" +
    "\021\066\023\051\024\061\030\022\035\103\036\030\037" +
    "\046\040\102\041\040\044\100\046\036\051\037\056\111" +
    "\057\027\063\017\066\013\067\033\070\105\072\075\073" +
    "\050\074\020\076\064\077\031\001\001\000\002\001\001" +
    "\000\010\047\325\050\317\071\314\001\001\000\024\007" +
    "\047\010\124\017\132\020\012\021\066\023\321\024\061" +
    "\072\075\073\050\001\001\000\100\002\323\003\125\006" +
    "\057\007\047\010\124\017\107\020\012\021\066\023\051" +
    "\024\061\026\147\030\022\035\103\036\030\037\046\040" +
    "\102\041\040\044\100\046\036\051\037\056\111\057\027" +
    "\063\017\066\013\067\033\070\105\072\075\073\050\074" +
    "\020\076\064\077\031\001\001\000\076\002\324\003\125" +
    "\006\057\007\047\010\124\017\107\020\012\021\066\023" +
    "\051\024\061\030\022\035\103\036\030\037\046\040\102" +
    "\041\040\044\100\046\036\051\037\056\111\057\027\063" +
    "\017\066\013\067\033\070\105\072\075\073\050\074\020" +
    "\076\064\077\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\002\331\003\125\006\057\007\047\010\124\017" +
    "\107\020\012\021\066\023\051\024\061\030\022\035\103" +
    "\036\030\037\046\040\102\041\040\044\100\046\036\051" +
    "\037\056\111\057\027\063\017\066\013\067\033\070\105" +
    "\072\075\073\050\074\020\076\064\077\031\001\001\000" +
    "\002\001\001\000\010\047\334\050\317\071\314\001\001" +
    "\000\010\047\336\050\317\071\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\047\341\050\317\071\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\103\345" +
    "\110\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\350\001\001\000\104\003\227\004\230\006\057" +
    "\007\047\010\226\017\107\020\012\021\066\023\051\024" +
    "\061\027\077\030\022\035\103\036\030\037\046\040\102" +
    "\041\040\044\100\046\036\051\037\052\224\056\111\057" +
    "\027\062\063\063\017\066\013\067\033\070\105\072\075" +
    "\073\050\074\020\076\064\077\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\047" +
    "\010\124\017\132\020\012\021\066\023\364\024\061\072" +
    "\075\073\050\075\363\001\001\000\002\001\001\000\004" +
    "\026\147\001\001\000\074\003\366\006\057\007\047\010" +
    "\124\017\107\020\012\021\066\023\051\024\061\030\022" +
    "\035\103\036\030\037\046\040\102\041\040\044\100\046" +
    "\036\051\037\056\111\057\027\063\017\066\013\067\033" +
    "\070\105\072\075\073\050\074\020\076\064\077\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\047\010\124\017\132\020\012" +
    "\021\066\023\173\024\061\042\u0100\043\170\072\075\073" +
    "\050\105\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\124\017\u0106" +
    "\021\u0103\073\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\003\u010d\006\057\007\047\010\124\017\107" +
    "\020\012\021\066\023\051\024\061\030\022\035\103\036" +
    "\030\037\046\040\102\041\040\044\100\046\036\051\037" +
    "\056\111\057\027\063\017\066\013\067\033\070\105\072" +
    "\075\073\050\074\020\076\064\077\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\003\u010c\006\057\007" +
    "\047\010\124\017\107\020\012\021\066\023\051\024\061" +
    "\030\022\035\103\036\030\037\046\040\102\041\040\044" +
    "\100\046\036\051\037\056\111\057\027\063\017\066\013" +
    "\067\033\070\105\072\075\073\050\074\020\076\064\077" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\047\010\124\017\132\020\012\021\066\023\266\024" +
    "\u010f\072\075\073\050\001\001\000\002\001\001\000\024" +
    "\007\047\010\124\017\132\020\012\021\066\023\266\024" +
    "\u0111\072\075\073\050\001\001\000\074\003\u0112\006\057" +
    "\007\047\010\124\017\107\020\012\021\066\023\051\024" +
    "\061\030\022\035\103\036\030\037\046\040\102\041\040" +
    "\044\100\046\036\051\037\056\111\057\027\063\017\066" +
    "\013\067\033\070\105\072\075\073\050\074\020\076\064" +
    "\077\031\001\001\000\002\001\001\000\074\003\u0114\006" +
    "\057\007\047\010\124\017\107\020\012\021\066\023\051" +
    "\024\061\030\022\035\103\036\030\037\046\040\102\041" +
    "\040\044\100\046\036\051\037\056\111\057\027\063\017" +
    "\066\013\067\033\070\105\072\075\073\050\074\020\076" +
    "\064\077\031\001\001\000\002\001\001\000\024\007\047" +
    "\010\124\017\132\020\012\021\066\023\266\024\u0116\072" +
    "\075\073\050\001\001\000\002\001\001\000\024\007\047" +
    "\010\124\017\132\020\012\021\066\023\266\024\u0118\072" +
    "\075\073\050\001\001\000\074\003\u0119\006\057\007\047" +
    "\010\124\017\107\020\012\021\066\023\051\024\061\030" +
    "\022\035\103\036\030\037\046\040\102\041\040\044\100" +
    "\046\036\051\037\056\111\057\027\063\017\066\013\067" +
    "\033\070\105\072\075\073\050\074\020\076\064\077\031" +
    "\001\001\000\002\001\001\000\074\003\u011b\006\057\007" +
    "\047\010\124\017\107\020\012\021\066\023\051\024\061" +
    "\030\022\035\103\036\030\037\046\040\102\041\040\044" +
    "\100\046\036\051\037\056\111\057\027\063\017\066\013" +
    "\067\033\070\105\072\075\073\050\074\020\076\064\077" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u011e\001\001\000\032\007\047\010\124\017\132\020" +
    "\012\021\066\023\200\024\061\042\304\043\170\065\u011f" +
    "\072\075\073\050\001\001\000\002\001\001\000\030\007" +
    "\047\010\124\017\132\020\012\021\066\023\u0121\024\u0122" +
    "\042\310\043\170\072\075\073\050\001\001\000\004\026" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\147\001\001\000\002\001\001\000\012\010\124\017\u012b" +
    "\021\u0103\073\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public class simbolo {
        Object id;
        Object tipo;
        Object valor;
        private Integer cantidadParametros;
        Object[] tipoParametros;

        simbolo(Object id, Object tipo, Integer cp, Object [] tp){
            this.id = id;
            this.tipo = tipo;
            this.cantidadParametros = cp;
            this.tipoParametros = tp;
        }

        simbolo(Object id, Object tipo, Object valor){
            this.id = id;
            this.tipo = tipo;
            this.valor = valor;
        }

        simbolo(Object id, Object tipo){
            this.id = id;
            this.tipo = tipo;
        }

        public String toString(){
            String s = this.id.toString();
            if (this.tipo != null) s += "\t" + this.tipo.toString();
            if (this.valor != null) s += "\tvalor: " + this.valor.toString();
            if (this.cantidadParametros != null) s += "\t" + this.cantidadParametros;
            if (this.tipoParametros != null) s += "\t" + Arrays.toString(this.tipoParametros);
            return s;
        }
        
        public boolean esFuncion(){
            return (this.cantidadParametros != null);
        }

    }

    // Clase de Registro Semántico
    public class RS {
        String clase; // Si es id, while, for, do (data object), operador, etc.
        Object nombre; // el símbolo. si es un operador el simbolo va aquí. si es una variale o funcion, es el id 
        Object tipo; // tipo de dato
        Object[] valor; // valor si es un DO
    
        RS(String clase){
            this.clase = clase;
        }

        RS(String clase, Object nombre){
            this.clase = clase;
            this.nombre = nombre;
        }

        RS(String clase, Object nombre, Object[] valor){
            this.clase = clase;
            this.nombre = nombre;
            this.valor = valor;
        }

        RS(String clase, Object nombre, Object tipo){
            this.clase = clase;
            this.nombre = nombre;
            this.tipo = tipo;
            this.valor = valor;
        }

        RS(String clase, Object nombre, Object tipo, Object[] valor){
            this.clase = clase;
            this.nombre = nombre;
            this.tipo = tipo;
            this.valor = valor;
        }
    
        public boolean equals(Object o){
            if (o == this) {
                return true;
            }
            if (!(o instanceof RS)) {
                return false;
            }
            RS rs = (RS) o;

            return rs.clase.equals(this.clase); 
                    /*
                    &&
                    rs.nombre.equals(this.nombre) &&
                    rs.tipo.equals(this.tipo) &&
                    rs.valor.equals(this.valor);
                    */

        }
    }

    // Clase de pila semantica
    public class PilaSemantica {
        private Stack<RS> ps;

        public PilaSemantica(){
            ps = new Stack<>();
        }

        public RS peek(){
            return ps.peek();
        }

        public void push(String clase){
            //System.out.println("haciendo push de " + clase);
            ps.push(new RS(clase));
        }

        public void push(String clase, Object nombre){
            //System.out.println("haciendo push de " + nombre);
            ps.push(new RS(clase, nombre));
        }

        public void push(String clase, Object nombre, Object[] valor){
            //System.out.println("haciendo push de " + nombre);
            ps.push(new RS(clase, nombre, valor));
        }

        public void push(String clase, Object nombre, Object tipo){
            //System.out.println("haciendo push de " + nombre);
            ps.push(new RS(clase, nombre, tipo));
        }

        public void push(RS r){
            //System.out.println("haciendo push de " + r.nombre);
            ps.push(r);
        }

        public RS pop(){
            //System.out.println("haciendo pop de " + ps.peek().nombre + " " + ps.peek().clase);
            return ps.pop();
        }

        public int search(String clase){
            return ps.search(new RS(clase));
        }

    }

    // TABLA DE SIMBOLOS
    static HashMap<Object, simbolo> TablaSimbolos = new HashMap<Object, simbolo>();

    // PILA SEMANTICA
    PilaSemantica pilaSemantica = new PilaSemantica();

    //  CODIGO ENSAMBLADOR
    static String ensamblador = "";

    static String code_segment = "global main \n\nsection .text";

    public static class Labels {
        private HashMap<String,String> l;

        public Labels() {
            l = new HashMap<String,String>();
        }

        public void append(String key, String value){
            String v = this.l.get(key);
            if(v != null) value = v + value;
            this.l.put(key, value);
        }

        public String getLabels(){
            String str = "";
            for (HashMap.Entry<String, String> entry : this.l.entrySet()) {
                //System.out.println("printeando " + entry.getKey());
                str += entry.getValue();
            }
            return str;
        }

        public String getNumeroLabel(){
            return String.valueOf(l.size());
        }

    }

    static Labels labels = new Labels();

    static Stack<String> labelStack = new Stack<>();

    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }


    public void report_fatal_error(String message, Object info) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        System.out.println("Error fatal en línea " + (s.right+1));
        
    }
    
    public static void main(String[] args){
        try {
            //  INICIALIZAR PILA DE LABELS EN MAIN
            labelStack.push("\nmain");

            // AGREGAR LA LABEL DE MAIN
            labels.append(labelStack.peek(), "\nmain:");
            System.out.println("Abriendo archivo " + args[0]);
            parser asin = new parser(
                    new AnalizadorLexicoCup( new FileReader(args[0])));
            asin.parse();
            System.out.println("    -----TABLA DE SIMBOLOS-----");

            // AGREGAR LAS VARIABLES A LA SECCION DE DATOS            
            String data_segment = "section .data\n";


            for (HashMap.Entry<Object, simbolo> entry : TablaSimbolos.entrySet()) {
                System.out.println(entry.getKey().toString() + "\t:\t " + entry.getValue().toString()); // imprimir tabla de simbolos
                simbolo s = entry.getValue();
                if (s.cantidadParametros == null) { // es una variable
                    String valor = (s.valor == null) ? "" : s.valor.toString();
                    data_segment +=  s.id.toString() + " dd " + valor + "\n";
                }
            }
            System.out.println("\nPrograma analizado");
            
            ensamblador = data_segment + code_segment+ labels.getLabels();
            //ensamblador += code_segment;

            System.out.println(ensamblador);

            //  CREA EL ARCHIVO
            FileWriter texto = new FileWriter(args[0].split("\\.")[0] + ".asm", false);
            texto.write(ensamblador);
            texto.close();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicial ::= programa funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicial ::= programa error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en estructura de programa. "+
    "Revise que haya al menos una función y que no haya declaraciones al final "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= programa cosa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cosa ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosa",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cosa ::= funcion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosa",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cosa ::= error_cosa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosa",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // error_cosa ::= sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Sentencia no esperada fuera de una función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_cosa",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // error_cosa ::= error_simbolo_fuera_de_lugar 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Símbolo fuera de lugar"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_cosa",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // error_cosa ::= cosa LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Llave derecha sin una llave izquierda respectiva."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_cosa",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // error_cosa ::= error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error desconocido "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_cosa",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // error_cosa ::= error PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error desconocido, se leyó hasta siguiente punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_cosa",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // error_simbolo_fuera_de_lugar ::= PARIZQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_simbolo_fuera_de_lugar",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // error_simbolo_fuera_de_lugar ::= PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_simbolo_fuera_de_lugar",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // token_invalido ::= ERROR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error léxico en línea " + (iright+1)+", columna " + (ileft+1) + " causado por \""+i+"\"" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("token_invalido",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // t_dato ::= LONG 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        //RESULT = t; 
        pilaSemantica.push("tipo", t);    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // t_dato ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        //RESULT = t; 
        pilaSemantica.push("tipo",t);    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // t_dato ::= CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        //RESULT = t; 
        pilaSemantica.push("tipo",t);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // t_dato ::= FLOAT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        //RESULT = t; 
        pilaSemantica.push("tipo",t);    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // t_dato ::= DOUBLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        //RESULT = t; 
        pilaSemantica.push("tipo",t);    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // t_dato ::= SHORT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        //RESULT = t; 
        pilaSemantica.push("tipo", t);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor_numerico ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = n;
            pilaSemantica.push("numero", n, "int"); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor_numerico ::= NUMERO_FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = n;
            pilaSemantica.push("float", n, "float"); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor_numerico ::= NUMERO_OCT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = n;
            pilaSemantica.push("octal", n, "oct"); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor_numerico ::= NUMERO_HEX 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = n;
            pilaSemantica.push("hex", n, "hex"); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operador ::= SUMA 
            {
              Object RESULT =null;
		 pilaSemantica.push("operador", "add"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operador ::= RESTA 
            {
              Object RESULT =null;
		 pilaSemantica.push("operador", "sub"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operador ::= MULTIPLICACION 
            {
              Object RESULT =null;
		 pilaSemantica.push("operador", "mul"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operador ::= DIVISION 
            {
              Object RESULT =null;
		 pilaSemantica.push("operador", "div"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operador ::= OP_LOGICO 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pilaSemantica.push("operador", op.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operador ::= MODULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion ::= valor operador valor 
            {
              Object RESULT =null;
		
        String op2 = pilaSemantica.pop().nombre.toString();
        String operador = pilaSemantica.pop().nombre.toString();
        String op1 = pilaSemantica.pop().nombre.toString();

        if(operador.equals("mul") || operador.equals("div")){
            labels.append(labelStack.peek(),"\nmov rax, " + op1 + "\t\t;multiplicacion o division" + 
                            "\nmov rbx, " + op2 + 
                            "\n" + operador + " rbx" + 
                            "\nmov rcx, rax"); // PONE EL RESULTADO EN RCX
        } else {
            labels.append(labelStack.peek(),"\nmov rax, " + op1 + "\t\t;suma o resta" + 
                            "\nmov rbx, " + op2 + 
                            "\n" + operador + " rax, rbx" + 
                            "\nmov rcx, rax"); // LO MUEVE A OTRO REGISTRO PARA QUE LO UTILICE ???
        }
        pilaSemantica.push("op");
        /*
        if(operador.equals("add")){
            pilaSemantica.push("do", Integer.toString(Integer.parseInt(op1) + Integer.parseInt(op2)));
        } else if(operador.equals("sub")){
            pilaSemantica.push("do", Integer.toString(Integer.parseInt(op1) - Integer.parseInt(op2)));
        }
        */
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacion ::= OP_INCDEC variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacion ::= variable OP_INCDEC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String operador = "";
        if(op.toString().equals("++")){
            operador = "add";
        } else {
            operador = "sub";
        }
        String id = pilaSemantica.pop().nombre.toString();
        labels.append(labelStack.peek(),"\nmov rax, " + id +
                        "\n" + operador + " rax, 1" + 
                        "\nmov " + id + ", rax");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacion ::= OP_NEGACION valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacion ::= error_operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // error_operacion ::= valor operador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en operación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_operacion",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= PARIZQ valor PARDER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= valor_numerico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= LITERAL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RS v = pilaSemantica.pop();
        pilaSemantica.push("do", v.nombre);
        if (TablaSimbolos.get(v.nombre) == null && TablaSimbolos.get("_"+v.nombre) == null) System.out.println("Error en línea " + (varright+1) + " columna "+ (varleft+1) + ": Variable no definida  \"" + v.nombre + "\"");
        try {
             if(TablaSimbolos.get(v.nombre).esFuncion()) System.out.println("Error en línea " + (varright+1) + " columna "+ (varleft+1) + ": Variable no definida  \"" + v.nombre + "\"");
        } catch(Exception e) {}
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor ::= IDENTIFICADOR PARIZQ PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        if(TablaSimbolos.get(id) == null && TablaSimbolos.get("_"+id) == null){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Símbolo no definido \"" + id + "\"");
        } else if (TablaSimbolos.get(id).cantidadParametros == null || TablaSimbolos.get(id).cantidadParametros != 0){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Cantidad incorrecta de parámetros para \"" + id + "\"");
        }

        pilaSemantica.push("do", "(resultado de funcion)");

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= IDENTIFICADOR PARIZQ elementos PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] e = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        int len = e.length;
        ArrayList<Object> arr = new ArrayList<Object>();

        for(int i = 0; i<len; i++){
            RS rs = pilaSemantica.pop();
            if (rs.clase.equals("numero") || rs.clase.equals("float") || rs.clase.equals("oct") || rs.clase.equals("hex")){
                arr.add(rs.tipo);
            } else {
                if (TablaSimbolos.get(rs.nombre) == null && TablaSimbolos.get("_"+rs.nombre) == null){
                    System.out.println("Error en línea " + (eright+1)+", columna " + (eleft+1) + ": Símbolo no definido \"" + rs.nombre + "\"");
                } else {
                    arr.add(TablaSimbolos.get(rs.nombre).tipo);
                }
            }
        }

        if(TablaSimbolos.get(id) == null){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Símbolo no definido \"" + id + "\"");
        } else if (TablaSimbolos.get(id).cantidadParametros == null || TablaSimbolos.get(id).cantidadParametros != len){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Cantidad incorrecta de parámetros para \"" + id + "\"");
        } else {
            if (!Arrays.equals(arr.toArray(), TablaSimbolos.get(id).tipoParametros)) System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Tipos incorrectos de parámetros para \"" + id + "\"");
        }

        pilaSemantica.push("do", "(resultado de funcion)");
        
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // array ::= LLAVEIZQ elementos LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array ::= LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array ::= LLAVEIZQ error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave derecha"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // elementos ::= valor resto_elementos 
            {
              Object[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] e = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        int len = e.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i+1] = e[i];
        }
        arr[0] = v;
        RESULT = arr;
        
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementos",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // elementos ::= valor valor 
            {
              Object[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se espera una coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementos",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elementos ::= valor COMA 
            {
              Object[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se espera un valor después de la coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementos",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // resto_elementos ::= 
            {
              Object[] RESULT =null;
		
        Object[] arr = {};
        RESULT = arr;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resto_elementos",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // resto_elementos ::= COMA valor resto_elementos 
            {
              Object[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] e = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int len = e.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i+1] = e[i];
        }
        arr[0] = v;
        RESULT = arr; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resto_elementos",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pilaSemantica.push("id", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // error_declaracion ::= t_dato variable 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_declaracion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // error_declaracion ::= CONST t_dato IDENTIFICADOR asignacion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_declaracion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // error_declaracion ::= CONST t_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_declaracion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // error_declaracion ::= CONST t_dato IDENTIFICADOR error PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error no reconocido en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_declaracion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] d = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
        ArrayList<Object> arr = new ArrayList<Object>();
        
        while(pilaSemantica.peek().clase != "tipo"){
            arr.add(pilaSemantica.pop().nombre);
        }

        Object tipo = pilaSemantica.pop().nombre;

        for (int i = 0; i<arr.size(); i++) {
            if (TablaSimbolos.get(arr.get(i)) != null || TablaSimbolos.get("_" + arr.get(i)) != null){
                System.out.println("Error en línea " + (dright+1) + ": Múltiple declaración de símbolo  \"" + arr.get(i) + "\"");
            } else {
                if (tipo.toString().equals("int")){
                    TablaSimbolos.put(arr.get(i), new simbolo(arr.get(i), tipo, 0));
                } if (tipo.toString().equals("float")){
                    TablaSimbolos.put(arr.get(i), new simbolo(arr.get(i), tipo, 0.0));
                } else {
                    TablaSimbolos.put(arr.get(i), new simbolo(arr.get(i), tipo));
                    // Tal vez aqui se deberia usar la pila semantica
                }
            }
        }

        /*
        int len = d.length;
        */
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion ::= t_dato declaracion_multiple NT$0 PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object[] d = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion ::= t_dato variable PCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RS id = pilaSemantica.pop();
        RS tipo = pilaSemantica.pop(); 
     
        if (TablaSimbolos.get(id.nombre) != null){
            System.out.println("Error en línea " + (vright+1) + ": Múltiple declaración de símbolo  \"" + id.nombre + "\"");
        } else {
            if (tipo.nombre.equals("int")){
                TablaSimbolos.put(id.nombre, new simbolo(id.nombre, tipo.nombre,0));
            } else {
                TablaSimbolos.put(id.nombre, new simbolo(id.nombre, tipo.nombre));
            }
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion ::= CONST t_dato IDENTIFICADOR asignacion PCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //TablaSimbolos.put(id, new simbolo(id, tipo, valor));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion ::= CONST t_dato IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        TablaSimbolos.put(id, new simbolo(id, tipo));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion ::= error_declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion ::= token_invalido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // error_declaracion_multiple ::= IDENTIFICADOR declaracion_multiple 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta una coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_declaracion_multiple",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion_multiple ::= variable resto_declaracion_multiple 
            {
              Object[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] d = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        int len = d.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i] = d[i];
        }
        arr[len] = v;
        RESULT = arr;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_multiple",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // resto_declaracion_multiple ::= 
            {
              Object[] RESULT =null;
		
        Object[] arr = {};
        RESULT = arr;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resto_declaracion_multiple",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // resto_declaracion_multiple ::= COMA variable resto_declaracion_multiple 
            {
              Object[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] r = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int len = r.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i] = r[i];
        }
        arr[len] = v;
        RESULT = arr; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("resto_declaracion_multiple",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignacion ::= variable IGUAL valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RS valor = pilaSemantica.pop();
        RS variable = pilaSemantica.pop();

        String op1 = variable.nombre.toString();
        String op2 = "";


        if (TablaSimbolos.get(variable.nombre) == null && TablaSimbolos.get("_"+variable.nombre) == null) System.out.println("Error en línea " + (varright+1) + " columna "+ (varleft+1) + ": Variable no definida  \"" + op1 + "\""); 
        
        try {
             if(TablaSimbolos.get(variable.nombre).esFuncion()) System.out.println("Error en línea " + (varright+1) + " columna "+ (varleft+1) + ": Variable no definida  \"" + op1 + "\"");
        } catch(Exception e) {}

        if (valor.clase.equals("op")){
            op2 = "rcx";
        } else {
            op2 = valor.nombre.toString();
        }
        
        labels.append(labelStack.peek(),"\nmov " + op1 + ", " + op2 + "\t\t;asignacion");

        pilaSemantica.push(valor);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignacion ::= t_dato variable IGUAL valor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": No se puede declarar y asignar una variable en la misma sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignacion ::= error_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // error_asignacion ::= variable IGUAL error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se esperaba expresión en asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_asignacion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_opc ::= 
            {
              Object[] RESULT =null;
		
        pilaSemantica.push("stop");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_opc",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$1 ::= 
            {
              Object[] RESULT =null;

        pilaSemantica.push("stop");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros_opc ::= NT$1 parametros 
            {
              Object[] RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object[]) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] p = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_opc",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros ::= parametro resto_parametros 
            {
              Object[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] ps = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // resto_parametros ::= 
            {
              Object[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("resto_parametros",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // resto_parametros ::= COMA parametro resto_parametros 
            {
              Object[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] ps = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("resto_parametros",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametro ::= t_dato variable 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String variable = pilaSemantica.pop().nombre.toString();
        String tipo = pilaSemantica.peek().nombre.toString();
        if (TablaSimbolos.get("_" + variable) != null){
            System.out.println("Error en línea " + (tright+1)+", columna " + (tleft+1) + ": Variable repetida en parámetros");
        } else {
            TablaSimbolos.put("_" + variable, new simbolo(variable, tipo));
        }
        //RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametro ::= parametro_error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametro_error ::= variable 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta tipo de dato del argumento."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_error",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametro_error ::= t_dato 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta el argumento"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_error",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // return ::= RETURN valor PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // return ::= RETURN PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // return ::= error_return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // error_return ::= RETURN valor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_return",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // error_return ::= RETURN error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Return Inválido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_return",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // funcion ::= t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion LLAVEDER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object[] p = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        ArrayList<Object> arr = new ArrayList<Object>();
        while(pilaSemantica.peek().clase != "stop"){
            RS rs = pilaSemantica.pop();
            if(rs.clase == "tipo") arr.add(rs.nombre);
        }

        pilaSemantica.pop(); // saca el stop

        Object tipo = pilaSemantica.pop().nombre;

        if(TablaSimbolos.get(id) != null){
            System.out.println("Error en línea " + (idright+1) + ": Múltiple declaración de símbolo  \"" + id + "\"");
        } else {
            TablaSimbolos.put(id, new simbolo(id, tipo, arr.size(), arr.toArray()));
        }

        Set<Object> llavesTabla = TablaSimbolos.keySet();
        ArrayList<Object> llaves = new ArrayList<>();
        for (Object llave : llavesTabla){
            if(llave.toString().startsWith("_")){
                llaves.add(llave);
            }
        }
        for (Object llave : llaves){
            if(llave.toString().startsWith("_")){
                TablaSimbolos.remove(llave);
            }
        }

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // funcion ::= VOID IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion LLAVEDER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object[] p = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        //TablaSimbolos.put(id, new simbolo(id, v, p.length, p));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // funcion ::= funcion_error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dentro_funcion ::= dentro_funcion cosa_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentro_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dentro_funcion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentro_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cosa_funcion ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosa_funcion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cosa_funcion ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosa_funcion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencia ::= asignacion PCOMA 
            {
              Object RESULT =null;
		
        pilaSemantica.pop();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia ::= IDENTIFICADOR OP_ATRIBUCION NUMERO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia ::= valor PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia ::= return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencia ::= sentencia_if 
            {
              Object RESULT =null;
		
        while (pilaSemantica.peek().clase != "condicion") pilaSemantica.pop();
        pilaSemantica.pop();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia ::= sentencia_if_else sentencia 
            {
              Object RESULT =null;
		
        labels.append(labelStack.peek(),"\nret");
        labelStack.pop();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia ::= sentencia_while 
            {
              Object RESULT =null;
		
        while (pilaSemantica.peek().clase != "while") pilaSemantica.pop();
        pilaSemantica.pop();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia ::= instruccion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia ::= sentencia_llaves 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia ::= BREAK PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //System.out.println(pilaSemantica.search("while"));
        if (pilaSemantica.search("while") == -1 && pilaSemantica.search("sentencia_do") == -1) System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Hay un break solito :(");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia ::= CONTINUE PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if (pilaSemantica.search("while") == -1 && pilaSemantica.search("sentencia_do") == -1) System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Hay un continue solito :(");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencia ::= sentencia_do 
            {
              Object RESULT =null;
		
        while (pilaSemantica.peek().clase != "sentencia_do") pilaSemantica.pop();
        pilaSemantica.pop();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencia ::= ELSE sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Hay un else solito :( "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia ::= error_sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_if_else ::= sentencia_if ELSE 
            {
              Object RESULT =null;
		
        while (pilaSemantica.peek().clase != "condicion") pilaSemantica.pop();
        String operacion = pilaSemantica.pop().nombre.toString();
        String label = "label" + labels.getNumeroLabel();

        
        switch(operacion){
            case "<":
                labels.append(labelStack.peek(),"\njge " + label);
                break;
            case ">":
                labels.append(labelStack.peek(),"\njle " + label);
                break;
            case "<=":
                labels.append(labelStack.peek(),"\njg " + label);
                break;
            case ">=":
                labels.append(labelStack.peek(),"\njl " + label);
                break;
            case "==":
                labels.append(labelStack.peek(),"\njne " + label);
                break;
            case "!=":
                labels.append(labelStack.peek(),"\nje " + label);
                break;
        }
        
        labels.append(labelStack.peek(),"\t;else");

        labelStack.push(label);
        labels.append(labelStack.peek(),"\n\n" + label + ":");

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if_else",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia_llaves ::= LLAVEIZQ sentencias LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llaves",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_llaves ::= LLAVEIZQ sentencias error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error posiblemente causado por no cerrar la llave {"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llaves",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_if ::= IF PARIZQ condicion PARDER sentencia 
            {
              Object RESULT =null;
		
        labels.append(labelStack.peek(),"\nret");
        labelStack.pop();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // condicion ::= valor OP_RELACIONAL valor 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String op2 = pilaSemantica.pop().nombre.toString();
        String op1 = pilaSemantica.pop().nombre.toString();
        String operacion = op.toString();

        Object[] a = {op1, op2};
        pilaSemantica.push("condicion", operacion, a);

        labels.append(labelStack.peek(),"\ncmp " + op1 + ", " + op2);

        String label = "label" + labels.getNumeroLabel();

        switch(operacion){
            case "<":
                labels.append(labelStack.peek(),"\njl " + label);
                break;
            case ">":
                labels.append(labelStack.peek(),"\njg " + label);
                break;
            case "<=":
                labels.append(labelStack.peek(),"\njle " + label);
                break;
            case ">=":
                labels.append(labelStack.peek(),"\njge " + label);
                break;
            case "==":
                labels.append(labelStack.peek(),"\nje " + label);
                break;
            case "!=":
                labels.append(labelStack.peek(),"\njne " + label);
                break;
        }


        labelStack.push(label);
        labels.append(labelStack.peek(),"\n\n" + label + ":");

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while ::= WHILE 
            {
              Object RESULT =null;
		 pilaSemantica.push("while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // while_condicion ::= while PARIZQ condicion PARDER 
            {
              Object RESULT =null;
		 
        pilaSemantica.push("while"); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condicion",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia_while ::= while_condicion sentencia 
            {
              Object RESULT =null;
		
        while (pilaSemantica.peek().clase != "condicion") pilaSemantica.pop();
        RS condicion = pilaSemantica.pop();
        String operacion = condicion.nombre.toString();
        Object[] operadores = condicion.valor;

        labels.append(labelStack.peek(),"\ncmp " + operadores[0].toString() + ", "+ operadores[1].toString());

        String label = labelStack.peek();

        switch(operacion){
            case "<":
                labels.append(labelStack.peek(),"\njl " + label);
                break;
            case ">":
                labels.append(labelStack.peek(),"\njg " + label);
                break;
            case "<=":
                labels.append(labelStack.peek(),"\njle " + label);
                break;
            case ">=":
                labels.append(labelStack.peek(),"\njge " + label);
                break;
            case "==":
                labels.append(labelStack.peek(),"\nje " + label);
                break;
            case "!=":
                labels.append(labelStack.peek(),"\njne " + label);
                break;
        }

        labels.append(labelStack.peek(),"\t\t;si no se cumple la condicion, vuelve a ejecutar");
        labels.append(labelStack.peek(),"\nret");
        labelStack.pop();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia_while ::= error_sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // argumentos ::= argumento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // argumentos ::= argumento COMA argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // argumentos ::= argumento argumento 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se esperaba una coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // argumento ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // instruccion ::= READ PARIZQ elementos PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // instruccion ::= READ PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // instruccion ::= WRITE PARIZQ elementos PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // instruccion ::= error_instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // do ::= DO 
            {
              Object RESULT =null;
		 pilaSemantica.push("sentencia_do"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia_do ::= do sentencia while PARIZQ operacion PARDER PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia_do ::= error_sentencia_do 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia_switch ::= SWITCH PARIZQ valor PARDER LLAVEIZQ cases LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_switch ::= error_sentencia_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cases ::= sentencia_case cases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cases ::= sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia_case ::= CASE valor DOSPUNTOS sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencia_case ::= DEFAULT DOSPUNTOS sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencia_case ::= CASE valor DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia_case ::= error_sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia_for ::= FOR PARIZQ asignacion PCOMA operacion PCOMA operacion PARDER sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencia_for ::= error_sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // error_sentencia ::= IDENTIFICADOR OP_ATRIBUCION NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // error_sentencia ::= valor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // error_sentencia ::= instruccion error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error por punto y coma no encontrado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // error_sentencia ::= BREAK 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // error_sentencia ::= CONTINUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // funcion_error ::= t_dato IDENTIFICADOR PARIZQ parametros_opc LLAVEIZQ dentro_funcion LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object[] i = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // funcion_error ::= t_dato IDENTIFICADOR parametros_opc PARDER LLAVEIZQ dentro_funcion LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object[] i = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // funcion_error ::= t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER dentro_funcion LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // funcion_error ::= t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion funcion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+ ": Falta cerrar llave de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // funcion_error ::= t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+ ": Error en función. Probablemente faltó cerrar la llave"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // funcion_error ::= t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion error LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+ ": Error no reconocido dentro de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // error_parentesis ::= PARIZQ argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // error_parentesis ::= argumentos PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // error_parentesis ::= PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // error_parentesis ::= PARIZQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // error_parentesis ::= argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // error_parentesis ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // error_sentencia_if ::= IF error LLAVEIZQ sentencias LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura de If inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_if",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // error_sentencia_while ::= while operacion PARDER sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_while",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // error_sentencia_while ::= while PARIZQ operacion sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_while",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // error_sentencia_do ::= do sentencia while error_parentesis PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_do",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // error_sentencia_do ::= do sentencia while PARIZQ operacion PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_do",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // error_instruccion ::= READ PARIZQ argumentos error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis derecho"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_instruccion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // error_instruccion ::= READ error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Paréntesis izquierdo esperado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_instruccion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // error_instruccion ::= WRITE error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Paréntesis izquierdo esperado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_instruccion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // error_instruccion ::= WRITE PARIZQ argumentos error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis derecho"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_instruccion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // error_instruccion ::= WRITE PARIZQ PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Función write necesita argumentos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_instruccion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // error_sentencia_switch ::= SWITCH error_parentesis LLAVEIZQ cases LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_switch",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // error_sentencia_switch ::= SWITCH PARIZQ error PARDER LLAVEIZQ cases LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en estructura del switch");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_switch",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // error_sentencia_switch ::= SWITCH PARIZQ valor PARDER cases LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta la llave");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_switch",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // error_sentencia_case ::= CASE valor sentencias 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta dos puntos");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_case",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // error_sentencia_case ::= DOSPUNTOS sentencias 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta el caso");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_case",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // error_sentencia_case ::= DEFAULT DOSPUNTOS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Caso default vacío");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_case",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // error_sentencia_for ::= FOR asignacion PCOMA operacion PCOMA operacion PARDER sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_for",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // error_sentencia_for ::= FOR PARIZQ asignacion PCOMA operacion PCOMA operacion sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_for",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // error_sentencia_for ::= FOR asignacion PCOMA operacion PCOMA operacion sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_for",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // error_sentencia_for ::= FOR PARIZQ error PARDER sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura del for incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_for",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // error_sentencia_for ::= FOR PARIZQ error PCOMA error PARDER sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura del for incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_for",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
