
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.Symbol;
import java.io.FileReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\054\003\000\002\021" +
    "\004\000\002\021\002\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\004\000\002\101\003\000\002\101\004\000\002" +
    "\100\003\000\002\100\003\000\002\102\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\042\005" +
    "\000\002\042\004\000\002\042\004\000\002\042\004\000" +
    "\002\042\003\000\002\114\004\000\002\041\005\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\005\000\002\041\006" +
    "\000\002\035\005\000\002\035\004\000\002\037\005\000" +
    "\002\037\003\000\002\037\004\000\002\036\003\000\002" +
    "\036\005\000\002\036\006\000\002\046\004\000\002\046" +
    "\006\000\002\046\005\000\002\046\007\000\002\005\005" +
    "\000\002\005\005\000\002\005\007\000\002\005\006\000" +
    "\002\005\003\000\002\005\003\000\002\051\004\000\002" +
    "\007\005\000\002\007\003\000\002\007\003\000\002\033" +
    "\005\000\002\033\003\000\002\115\004\000\002\024\005" +
    "\000\002\024\003\000\002\025\002\000\002\025\003\000" +
    "\002\026\004\000\002\026\003\000\002\073\003\000\002" +
    "\073\003\000\002\055\005\000\002\055\004\000\002\055" +
    "\003\000\002\050\004\000\002\050\004\000\002\031\012" +
    "\000\002\031\012\000\002\031\003\000\002\027\004\000" +
    "\002\027\002\000\002\072\003\000\002\072\003\000\002" +
    "\003\004\000\002\003\003\000\002\004\004\000\002\004" +
    "\006\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\057\005\000\002\057\005" +
    "\000\002\056\007\000\002\056\003\000\002\060\007\000" +
    "\002\060\011\000\002\060\003\000\002\062\003\000\002" +
    "\062\005\000\002\062\004\000\002\063\003\000\002\061" +
    "\006\000\002\061\005\000\002\061\006\000\002\061\003" +
    "\000\002\064\011\000\002\064\003\000\002\066\011\000" +
    "\002\066\003\000\002\067\004\000\002\067\003\000\002" +
    "\070\006\000\002\070\005\000\002\070\005\000\002\070" +
    "\003\000\002\071\013\000\002\071\003\000\002\076\003" +
    "\000\002\076\005\000\002\076\003\000\002\076\004\000" +
    "\002\076\003\000\002\076\003\000\002\074\011\000\002" +
    "\074\011\000\002\074\011\000\002\074\012\000\002\074" +
    "\012\000\002\074\013\000\002\107\004\000\002\107\004" +
    "\000\002\107\003\000\002\107\003\000\002\107\003\000" +
    "\002\107\002\000\002\075\007\000\002\077\006\000\002" +
    "\077\006\000\002\110\007\000\002\110\010\000\002\111" +
    "\006\000\002\111\004\000\002\111\004\000\002\111\006" +
    "\000\002\111\005\000\002\112\007\000\002\112\011\000" +
    "\002\112\010\000\002\113\005\000\002\113\004\000\002" +
    "\113\004\000\002\103\012\000\002\103\012\000\002\103" +
    "\011\000\002\103\007\000\002\103\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\104\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\024\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\054" +
    "\ufffe\055\ufffe\063\ufffe\001\002\000\104\002\000\003\044" +
    "\004\007\005\033\006\043\007\106\010\061\011\074\012" +
    "\021\013\011\014\070\015\016\016\010\017\034\020\063" +
    "\021\110\022\066\023\024\024\051\026\012\027\017\031" +
    "\041\032\056\033\052\034\026\046\076\047\014\050\040" +
    "\051\102\052\067\054\065\055\025\063\055\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\134" +
    "\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\061\uffec\062\uffec\063\uffec\001" +
    "\002\000\012\034\uffed\051\uffed\052\uffed\062\uffed\001\002" +
    "\000\012\034\ufff0\051\ufff0\052\ufff0\062\ufff0\001\002\000" +
    "\016\011\074\012\021\013\011\014\070\015\016\016\010" +
    "\001\002\000\134\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\001\002\000\026\004\007\005\033\006\043" +
    "\007\106\010\061\034\123\046\076\047\014\050\111\052" +
    "\121\001\002\000\114\002\uff85\003\uff85\004\uff85\005\uff85" +
    "\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014" +
    "\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85" +
    "\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031" +
    "\uff85\032\uff85\033\uff85\034\uff85\046\uff85\047\uff85\050\uff85" +
    "\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\063" +
    "\uff85\001\002\000\012\034\uffee\051\uffee\052\uffee\062\uffee" +
    "\001\002\000\116\002\uff75\003\uff75\004\uff75\005\uff75\006" +
    "\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75" +
    "\015\uff75\016\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023" +
    "\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\034\uff75\046\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\061\u0120" +
    "\063\uff75\001\002\000\114\002\uff7b\003\uff7b\004\uff7b\005" +
    "\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b" +
    "\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022" +
    "\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b" +
    "\031\uff7b\032\uff7b\033\uff7b\034\uff7b\046\uff7b\047\uff7b\050" +
    "\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b" +
    "\063\uff7b\001\002\000\012\034\ufff1\051\ufff1\052\ufff1\062" +
    "\ufff1\001\002\000\114\002\uffb1\003\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\063" +
    "\uffb1\001\002\000\106\002\uffff\003\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff" +
    "\023\uffff\024\uffff\026\uffff\027\uffff\031\uffff\032\uffff\033" +
    "\uffff\034\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff" +
    "\053\u011f\054\uffff\055\uffff\063\uffff\001\002\000\006\034" +
    "\173\050\u0107\001\002\000\006\003\377\050\u0100\001\002" +
    "\000\142\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\045\374\046\uffcf\047\uffcf\050\127" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\126\061\uffcf\062\uffcf\063\uffcf\001\002\000\114\002\uff8f" +
    "\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f" +
    "\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\055\uff8f\056\uff8f\063\uff8f\001\002\000\114\002\uffa1" +
    "\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\372\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\063\uffa1\001\002\000\106\002\uffac" +
    "\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026\uffac\027" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\046\uffac\047\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\063" +
    "\uffac\001\002\000\006\003\uff87\061\uff87\001\002\000\134" +
    "\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\061\uffea\062\uffea\063\uffea\001" +
    "\002\000\006\003\362\050\363\001\002\000\114\002\uff9e" +
    "\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\063\uff9e\001\002\000\114\002\uff9d" +
    "\003\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d" +
    "\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\063\uff9d\001\002\000\006\003\360" +
    "\061\361\001\002\000\106\002\ufff5\003\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\026\ufff5\027\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\046\ufff5\047\014\050\ufff5\051\ufff5\052" +
    "\121\053\ufff5\054\ufff5\055\ufff5\063\ufff5\001\002\000\032" +
    "\003\355\004\007\005\033\006\043\007\106\010\061\034" +
    "\123\046\076\047\014\050\111\052\121\061\356\001\002" +
    "\000\106\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\026\ufff9\027\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\063\ufff9\001\002\000\134\002\uffe9\003\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\061\uffe9\062\uffe9\063\uffe9\001\002\000\110\002" +
    "\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7" +
    "\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\061\353\063\ufff7\001\002\000\114\002\uff9b\003\uff9b\004" +
    "\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\046\uff9b\047" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\063\uff9b\001\002\000\134\002\uffdb\003\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\001\002\000\116\002\uffbd" +
    "\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\061\uffbd\063\uffbd\001\002\000\132" +
    "\002\uff78\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016\uff78" +
    "\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025" +
    "\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78" +
    "\034\uff78\036\135\037\143\040\133\041\134\042\142\043" +
    "\136\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78" +
    "\054\uff78\055\uff78\056\uff78\061\200\063\uff78\001\002\000" +
    "\116\002\uff76\003\uff76\004\uff76\005\uff76\006\uff76\007\uff76" +
    "\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016" +
    "\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76" +
    "\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033" +
    "\uff76\034\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76" +
    "\053\uff76\054\uff76\055\uff76\056\uff76\061\352\063\uff76\001" +
    "\002\000\004\034\343\001\002\000\114\002\uff92\003\uff92" +
    "\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92" +
    "\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\046\uff92" +
    "\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055" +
    "\uff92\056\uff92\063\uff92\001\002\000\106\002\ufffc\003\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\026\ufffc\027\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\063\ufffc\001" +
    "\002\000\106\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\026\ufff3\027\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\063\ufff3\001\002\000\030\004\007\005" +
    "\033\006\043\007\106\010\061\034\123\046\076\047\014" +
    "\050\306\051\117\052\121\001\002\000\004\034\234\001" +
    "\002\000\134\002\uffd8\003\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\001\002\000\134\002\uffda\003\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\061" +
    "\uffda\062\uffda\063\uffda\001\002\000\106\002\uffc3\003\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\063\uffc3\001" +
    "\002\000\054\004\007\005\033\006\043\007\106\010\061" +
    "\017\034\020\063\021\110\022\066\023\024\024\051\027" +
    "\017\031\041\032\056\034\026\046\076\047\014\050\111" +
    "\052\067\054\065\055\025\001\002\000\136\002\uffd7\003" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\227\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\046\152\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\001\002" +
    "\000\006\003\217\050\220\001\002\000\026\004\007\005" +
    "\033\006\043\007\106\010\061\034\123\046\076\047\014" +
    "\050\204\052\121\001\002\000\056\004\007\005\033\006" +
    "\043\007\106\010\061\017\034\020\063\021\110\022\066" +
    "\023\024\024\051\027\017\031\041\032\056\034\026\046" +
    "\076\047\014\050\111\052\067\053\154\054\065\055\025" +
    "\001\002\000\012\034\uffef\051\uffef\052\uffef\062\uffef\001" +
    "\002\000\106\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\026\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\063\ufffb\001\002\000\106\002\ufffa\003" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\026\ufffa\027\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\063\ufffa" +
    "\001\002\000\134\002\uffde\003\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\061\uffde\062" +
    "\uffde\063\uffde\001\002\000\012\034\ufff2\051\ufff2\052\ufff2" +
    "\062\ufff2\001\002\000\106\002\uffc4\003\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\063\uffc4\001\002\000\004" +
    "\034\173\001\002\000\114\002\uff9f\003\uff9f\004\uff9f\005" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\063\uff9f\001\002\000\114\002\uff98\003\uff98\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\046\uff98\047\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\063\uff98\001\002\000\114\002\uffa2\003\uffa2\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\063\uffa2\001\002\000\106\002\ufff4\003\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\026\ufff4\027\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\055\ufff4\063\ufff4\001\002\000\114" +
    "\002\uff83\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83\010" +
    "\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83" +
    "\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025" +
    "\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83" +
    "\034\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053" +
    "\uff83\054\uff83\055\uff83\056\uff83\063\uff83\001\002\000\106" +
    "\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\026" +
    "\ufffd\027\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\063\ufffd\001\002\000\116\002\uff7a\003\uff7a\004\uff7a" +
    "\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013" +
    "\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a" +
    "\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030" +
    "\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\046\uff7a\047\uff7a" +
    "\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056" +
    "\uff7a\061\171\063\uff7a\001\002\000\134\002\uffeb\003\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\061\uffeb\062\uffeb\063\uffeb\001\002\000\114\002" +
    "\uff96\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96" +
    "\054\uff96\055\uff96\056\uff96\063\uff96\001\002\000\054\004" +
    "\007\005\033\006\043\007\106\010\061\017\034\020\063" +
    "\021\110\022\066\023\024\024\051\027\017\031\041\032" +
    "\056\034\026\046\076\047\014\050\111\052\067\054\065" +
    "\055\025\001\002\000\026\004\007\005\033\006\043\007" +
    "\106\010\061\034\123\046\076\047\014\050\111\052\121" +
    "\001\002\000\004\022\113\001\002\000\032\004\007\005" +
    "\033\006\043\007\106\010\061\034\123\046\076\047\014" +
    "\050\116\051\117\052\121\061\uff69\001\002\000\036\003" +
    "\uff8e\004\007\005\033\006\043\007\106\010\061\034\123" +
    "\046\076\047\014\050\111\051\uff8e\052\121\061\uff8e\062" +
    "\166\001\002\000\004\061\164\001\002\000\030\004\007" +
    "\005\033\006\043\007\106\010\061\034\123\046\076\047" +
    "\014\050\111\052\121\061\uff6b\001\002\000\006\052\uff6c" +
    "\061\uff6c\001\002\000\052\003\uff8b\004\uff8b\005\uff8b\006" +
    "\uff8b\007\uff8b\010\uff8b\034\uff8b\036\135\037\143\040\133" +
    "\041\134\042\142\043\136\046\uff8b\047\uff8b\050\uff8b\051" +
    "\uff8b\052\uff8b\061\uff8b\062\uff8b\001\002\000\030\004\007" +
    "\005\033\006\043\007\106\010\061\034\123\046\076\047" +
    "\014\050\111\052\121\053\154\001\002\000\134\002\uffd7" +
    "\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\046" +
    "\152\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\001\002\000" +
    "\136\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\046\uffcf\047\uffcf\050\127\051\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\126\061\uffcf\062\uffcf" +
    "\063\uffcf\001\002\000\010\051\125\052\uff6a\061\uff6a\001" +
    "\002\000\006\052\uff6d\061\uff6d\001\002\000\006\004\147" +
    "\060\150\001\002\000\030\004\007\005\033\006\043\007" +
    "\106\010\061\034\123\046\076\047\014\050\111\051\131" +
    "\052\121\001\002\000\004\051\146\001\002\000\134\002" +
    "\uffd6\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\061\uffd6\062\uffd6\063\uffd6\001\002" +
    "\000\050\004\007\005\033\006\043\007\106\010\061\034" +
    "\123\036\135\037\143\040\133\041\134\042\142\043\136" +
    "\046\076\047\014\050\111\051\uffd1\052\121\053\uffd1\062" +
    "\140\001\002\000\134\002\uffe6\003\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\001\002\000\134\002\uffe5\003\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\001\002\000\134\002\uffe8" +
    "\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\046" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\061\uffe8\062\uffe8\063\uffe8\001\002\000" +
    "\134\002\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\055\uffe3\056\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\001\002\000\022\036\135\037\143\040\133\041\134\042" +
    "\142\043\136\051\uffd0\053\uffd0\001\002\000\026\004\007" +
    "\005\033\006\043\007\106\010\061\034\123\046\076\047" +
    "\014\050\111\052\121\001\002\000\134\002\uffdd\003\uffdd" +
    "\004\007\005\033\006\043\007\106\010\061\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\123\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\046\076\047" +
    "\014\050\111\051\uffdd\052\121\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\061\uffdd\062\uffdd\063\uffdd\001\002\000\134\002" +
    "\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\061\uffe4\062\uffe4\063\uffe4\001\002" +
    "\000\134\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\001\002\000\134\002\uffe2\003\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\036\135\037\143\040\133" +
    "\041\134\042\142\043\136\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\061\uffe2" +
    "\062\uffe2\063\uffe2\001\002\000\006\051\uffd2\053\uffd2\001" +
    "\002\000\134\002\uffd5\003\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\001\002\000\004\060\151\001\002\000\136\002" +
    "\uffce\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\061\uffce\062\uffce\063\uffce" +
    "\001\002\000\136\002\uffcd\003\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\001\002\000\134\002\uffe0\003\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\061\uffe0\062\uffe0\063\uffe0\001\002\000\004\053" +
    "\155\001\002\000\134\002\uffd3\003\uffd3\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\001\002\000\134\002\uffd4\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\001\002\000\050\004\uff8b" +
    "\005\uff8b\006\uff8b\007\uff8b\010\uff8b\034\uff8b\036\135\037" +
    "\143\040\133\041\134\042\142\043\136\046\uff8b\047\uff8b" +
    "\050\uff8b\051\163\052\uff8b\061\uff8b\062\uff8b\001\002\000" +
    "\050\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\034\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\161\052\uffd8\061\uffd8\062\uffd8" +
    "\001\002\000\006\052\uff6e\061\uff6e\001\002\000\116\002" +
    "\uff64\003\uff64\004\uff64\005\uff64\006\uff64\007\uff64\010\uff64" +
    "\011\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017" +
    "\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64\025\uff64" +
    "\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034" +
    "\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64" +
    "\054\uff64\055\uff64\056\uff64\061\162\063\uff64\001\002\000" +
    "\114\002\uff86\003\uff86\004\uff86\005\uff86\006\uff86\007\uff86" +
    "\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\063\uff86\001\002\000" +
    "\134\002\uffdc\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\001\002\000\114\002\uff65\003\uff65\004\uff65\005\uff65\006" +
    "\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65" +
    "\015\uff65\016\uff65\017\uff65\020\uff65\021\uff65\022\uff65\023" +
    "\uff65\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65" +
    "\032\uff65\033\uff65\034\uff65\046\uff65\047\uff65\050\uff65\051" +
    "\uff65\052\uff65\053\uff65\054\uff65\055\uff65\056\uff65\063\uff65" +
    "\001\002\000\012\003\uff8c\051\uff8c\052\uff8c\061\uff8c\001" +
    "\002\000\026\004\007\005\033\006\043\007\106\010\061" +
    "\034\123\046\076\047\014\050\111\052\121\001\002\000" +
    "\012\003\uff8d\051\uff8d\052\uff8d\061\uff8d\001\002\000\020" +
    "\036\135\037\143\040\133\041\134\042\142\043\136\051" +
    "\163\001\002\000\114\002\uffa5\003\uffa5\004\uffa5\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\034\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\063" +
    "\uffa5\001\002\000\134\002\uffe1\003\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\001\002\000\140\002\uffcf\003\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\126\061\uffcf\062\uffcf\063\uffcf\001\002" +
    "\000\006\003\201\053\202\001\002\000\100\003\uff78\004" +
    "\007\005\033\006\043\007\106\010\061\017\uff78\020\uff78" +
    "\021\uff78\022\uff78\023\uff78\024\uff78\027\uff78\031\uff78\032" +
    "\uff78\034\123\036\135\037\143\040\133\041\134\042\142" +
    "\043\136\046\076\047\014\050\111\052\121\053\uffd1\054" +
    "\uff78\055\uff78\061\200\062\140\001\002\000\066\003\uffa6" +
    "\004\007\005\033\006\043\007\106\010\061\017\034\020" +
    "\063\021\110\022\066\023\024\024\051\025\uffa6\027\017" +
    "\030\uffa6\031\041\032\056\034\026\046\076\047\014\050" +
    "\111\052\067\053\uffa6\054\065\055\025\056\uffa6\001\002" +
    "\000\014\003\uffa7\025\uffa7\030\uffa7\053\uffa7\056\uffa7\001" +
    "\002\000\114\002\uffa3\003\uffa3\004\uffa3\005\uffa3\006\uffa3" +
    "\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\063\uffa3\001" +
    "\002\000\114\002\uff94\003\uff94\004\uff94\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94" +
    "\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032" +
    "\uff94\033\uff94\034\uff94\046\uff94\047\uff94\050\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\063\uff94\001" +
    "\002\000\114\002\uff95\003\uff95\004\uff95\005\uff95\006\uff95" +
    "\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015" +
    "\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032" +
    "\uff95\033\uff95\034\uff95\046\uff95\047\uff95\050\uff95\051\uff95" +
    "\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\063\uff95\001" +
    "\002\000\016\036\135\037\143\040\133\041\134\042\142" +
    "\043\136\001\002\000\026\004\007\005\033\006\043\007" +
    "\106\010\061\034\123\046\076\047\014\050\111\052\121" +
    "\001\002\000\020\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\051\206\001\002\000\054\004\007\005\033" +
    "\006\043\007\106\010\061\017\034\020\063\021\110\022" +
    "\066\023\024\024\051\027\017\031\041\032\056\034\026" +
    "\046\076\047\014\050\111\052\067\054\065\055\025\001" +
    "\002\000\114\002\uff67\003\uff67\004\uff67\005\uff67\006\uff67" +
    "\007\uff67\010\uff67\011\uff67\012\uff67\013\uff67\014\uff67\015" +
    "\uff67\016\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67" +
    "\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032" +
    "\uff67\033\uff67\034\uff67\046\uff67\047\uff67\050\uff67\051\uff67" +
    "\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67\063\uff67\001" +
    "\002\000\072\004\007\005\033\006\043\007\106\010\061" +
    "\017\034\020\063\021\110\022\066\023\024\024\051\027" +
    "\017\031\041\032\056\034\026\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\046\076\047\014\050\111\051" +
    "\212\052\067\054\065\055\025\001\002\000\114\002\uff66" +
    "\003\uff66\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\011" +
    "\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66\017\uff66" +
    "\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026" +
    "\uff66\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66" +
    "\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054" +
    "\uff66\055\uff66\056\uff66\063\uff66\001\002\000\054\004\007" +
    "\005\033\006\043\007\106\010\061\017\034\020\063\021" +
    "\110\022\066\023\024\024\051\027\017\031\041\032\056" +
    "\034\026\046\076\047\014\050\111\052\213\054\065\055" +
    "\025\001\002\000\056\004\007\005\033\006\043\007\106" +
    "\010\061\017\034\020\063\021\110\022\066\023\024\024" +
    "\051\027\017\031\041\032\056\034\026\046\076\047\014" +
    "\050\111\052\067\053\154\054\065\055\025\001\002\000" +
    "\114\002\uff91\003\uff91\004\uff91\005\uff91\006\uff91\007\uff91" +
    "\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91" +
    "\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\055\uff91\056\uff91\063\uff91\001\002\000" +
    "\060\003\uffa6\004\007\005\033\006\043\007\106\010\061" +
    "\017\034\020\063\021\110\022\066\023\024\024\051\027" +
    "\017\031\041\032\056\034\026\046\076\047\014\050\111" +
    "\052\067\053\216\054\065\055\025\001\002\000\114\002" +
    "\uff90\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017" +
    "\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90" +
    "\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034" +
    "\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90" +
    "\054\uff90\055\uff90\056\uff90\063\uff90\001\002\000\006\003" +
    "\uff62\061\uff62\001\002\000\030\004\007\005\033\006\043" +
    "\007\106\010\061\034\123\046\076\047\014\050\111\051" +
    "\222\052\121\001\002\000\004\051\226\001\002\000\006" +
    "\003\uff89\061\uff89\001\002\000\050\003\uff8b\004\007\005" +
    "\033\006\043\007\106\010\061\034\123\036\135\037\143" +
    "\040\133\041\134\042\142\043\136\046\076\047\014\050" +
    "\111\051\uffd1\052\121\062\140\001\002\000\004\003\225" +
    "\001\002\000\006\003\uff63\061\uff63\001\002\000\006\003" +
    "\uff8a\061\uff8a\001\002\000\116\002\uffbc\003\uffbc\004\007" +
    "\005\033\006\043\007\106\010\061\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\123\046\076\047\014" +
    "\050\111\051\uffbc\052\121\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\061\uffbc\063\uffbc\001\002\000\132\002\uffbe\003\uffbe" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036\135" +
    "\037\143\040\133\041\134\042\142\043\136\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\061\uffbe\063\uffbe\001\002\000\114\002\uff97\003" +
    "\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97" +
    "\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\046" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\063\uff97\001\002\000\004\061\uffbf\001" +
    "\002\000\112\002\uffcc\003\uffcc\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\061\304\062\251\063\uffcc\001\002\000" +
    "\114\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\247\046" +
    "\uffcf\047\uffcf\050\243\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\057\126\061\uffcf\062\uffcf\063\uffcf\001\002\000" +
    "\004\061\236\001\002\000\106\002\uffc8\003\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\063\uffc8\001\002\000" +
    "\012\034\173\051\uffb4\052\uffb4\062\uffb4\001\002\000\004" +
    "\061\uffc2\001\002\000\010\051\uffb5\061\uffc0\062\251\001" +
    "\002\000\010\051\uffba\052\uffba\062\301\001\002\000\024" +
    "\011\074\012\021\013\011\014\070\015\016\016\010\034" +
    "\173\051\uffb9\052\uffb9\001\002\000\006\051\uffb8\052\uffb8" +
    "\001\002\000\004\051\253\001\002\000\010\051\uffb6\052" +
    "\uffb6\062\uffb6\001\002\000\106\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\034\247\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\057\126\061\uffcf\062\uffcf\063\uffcf\001\002\000" +
    "\006\061\uffc0\062\251\001\002\000\004\034\247\001\002" +
    "\000\004\061\uffc1\001\002\000\004\052\254\001\002\000" +
    "\076\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa" +
    "\031\uffaa\032\uffaa\034\uffaa\046\uffaa\047\uffaa\050\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\063\uffaa\001\002\000\076" +
    "\004\007\005\033\006\043\007\106\010\061\011\074\012" +
    "\021\013\011\014\070\015\016\016\010\017\034\020\063" +
    "\021\110\022\066\023\024\024\051\026\012\027\017\031" +
    "\041\032\056\034\026\046\076\047\014\050\111\052\067" +
    "\053\257\054\065\055\025\063\055\001\002\000\102\003" +
    "\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\026\uffab\027\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\046\uffab\047\uffab\050" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\063\uffab\001\002" +
    "\000\106\002\uff73\003\uff73\004\uff73\005\uff73\006\uff73\007" +
    "\uff73\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73" +
    "\016\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024" +
    "\uff73\026\uff73\027\uff73\031\uff73\032\uff73\033\uff73\034\uff73" +
    "\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\054" +
    "\uff73\055\uff73\063\uff73\001\002\000\004\034\247\001\002" +
    "\000\102\003\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\026" +
    "\uffa8\027\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\063" +
    "\uffa8\001\002\000\102\003\uffa9\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\026\uffa9\027\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\063\uffa9\001\002\000\010\051\uffb5\052\uffb5\062" +
    "\uffb5\001\002\000\006\051\265\052\266\001\002\000\076" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\031" +
    "\uffaa\032\uffaa\034\uffaa\046\uffaa\047\uffaa\050\uffaa\052\271" +
    "\053\uffaa\054\uffaa\055\uffaa\063\uffaa\001\002\000\076\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\031\uffaa" +
    "\032\uffaa\034\uffaa\046\uffaa\047\uffaa\050\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\063\uffaa\001\002\000\076\004\007" +
    "\005\033\006\043\007\106\010\061\011\074\012\021\013" +
    "\011\014\070\015\016\016\010\017\034\020\063\021\110" +
    "\022\066\023\024\024\051\026\012\027\017\031\041\032" +
    "\056\034\026\046\076\047\014\050\111\052\067\053\270" +
    "\054\065\055\025\063\055\001\002\000\106\002\uff74\003" +
    "\uff74\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74" +
    "\012\uff74\013\uff74\014\uff74\015\uff74\016\uff74\017\uff74\020" +
    "\uff74\021\uff74\022\uff74\023\uff74\024\uff74\026\uff74\027\uff74" +
    "\031\uff74\032\uff74\033\uff74\034\uff74\046\uff74\047\uff74\050" +
    "\uff74\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\063\uff74" +
    "\001\002\000\102\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\063\uffaa\001\002\000\076\004\007\005\033\006\043" +
    "\007\106\010\061\011\074\012\021\013\011\014\070\015" +
    "\016\016\010\017\034\020\063\021\110\022\066\023\024" +
    "\024\051\026\012\027\017\031\041\032\056\034\026\046" +
    "\076\047\014\050\111\052\067\053\273\054\065\055\025" +
    "\063\055\001\002\000\106\002\uff72\003\uff72\004\uff72\005" +
    "\uff72\006\uff72\007\uff72\010\uff72\011\uff72\012\uff72\013\uff72" +
    "\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022" +
    "\uff72\023\uff72\024\uff72\026\uff72\027\uff72\031\uff72\032\uff72" +
    "\033\uff72\034\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052" +
    "\uff72\053\uff72\054\uff72\055\uff72\063\uff72\001\002\000\102" +
    "\003\276\004\007\005\033\006\043\007\106\010\061\011" +
    "\074\012\021\013\011\014\070\015\016\016\010\017\034" +
    "\020\063\021\110\022\066\023\024\024\051\026\012\027" +
    "\017\031\041\032\056\033\052\034\026\046\076\047\014" +
    "\050\111\052\067\053\275\054\065\055\025\063\055\001" +
    "\002\000\106\002\uffae\003\uffae\004\uffae\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\026\uffae\027\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\063\uffae\001\002\000\106\002\uff70\003" +
    "\uff70\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70" +
    "\012\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\020" +
    "\uff70\021\uff70\022\uff70\023\uff70\024\uff70\026\uff70\027\uff70" +
    "\031\uff70\032\uff70\033\uff70\034\uff70\046\uff70\047\uff70\050" +
    "\uff70\051\uff70\052\uff70\053\300\054\uff70\055\uff70\063\uff70" +
    "\001\002\000\106\002\uff71\003\uff71\004\uff71\005\uff71\006" +
    "\uff71\007\uff71\010\uff71\011\uff71\012\uff71\013\uff71\014\uff71" +
    "\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71\022\uff71\023" +
    "\uff71\024\uff71\026\uff71\027\uff71\031\uff71\032\uff71\033\uff71" +
    "\034\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053" +
    "\uff71\054\uff71\055\uff71\063\uff71\001\002\000\106\002\uff6f" +
    "\003\uff6f\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011" +
    "\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f" +
    "\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\026\uff6f\027" +
    "\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\046\uff6f\047\uff6f" +
    "\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\063" +
    "\uff6f\001\002\000\020\011\074\012\021\013\011\014\070" +
    "\015\016\016\010\034\173\001\002\000\006\051\uffbb\052" +
    "\uffbb\001\002\000\010\051\uffb7\052\uffb7\062\uffb7\001\002" +
    "\000\106\002\uffc7\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\063\uffc7\001\002\000\004\052\340\001\002" +
    "\000\030\003\310\004\007\005\033\006\043\007\106\010" +
    "\061\034\123\046\076\047\014\050\111\052\121\001\002" +
    "\000\046\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\034" +
    "\uff8b\036\135\037\143\040\133\041\134\042\142\043\136" +
    "\046\uff8b\047\uff8b\050\uff8b\051\332\052\uff8b\062\uff8b\001" +
    "\002\000\004\051\311\001\002\000\004\052\312\001\002" +
    "\000\010\025\320\030\313\056\315\001\002\000\004\056" +
    "\330\001\002\000\012\025\uff7d\030\uff7d\053\uff7d\056\uff7d" +
    "\001\002\000\054\004\007\005\033\006\043\007\106\010" +
    "\061\017\034\020\063\021\110\022\066\023\024\024\051" +
    "\027\017\031\041\032\056\034\026\046\076\047\014\050" +
    "\111\052\067\054\065\055\025\001\002\000\004\053\326" +
    "\001\002\000\012\025\320\030\313\053\uff81\056\315\001" +
    "\002\000\026\004\007\005\033\006\043\007\106\010\061" +
    "\034\123\046\076\047\014\050\111\052\121\001\002\000" +
    "\072\004\007\005\033\006\043\007\106\010\061\017\034" +
    "\020\063\021\110\022\066\023\024\024\051\027\017\031" +
    "\041\032\056\034\026\036\135\037\143\040\133\041\134" +
    "\042\142\043\136\046\076\047\014\050\111\052\067\054" +
    "\065\055\025\056\322\001\002\000\064\004\007\005\033" +
    "\006\043\007\106\010\061\017\034\020\063\021\110\022" +
    "\066\023\024\024\051\025\uff7e\027\017\030\uff7e\031\041" +
    "\032\056\034\026\046\076\047\014\050\111\052\067\053" +
    "\uff7e\054\065\055\025\056\uff7e\001\002\000\012\025\uff5b" +
    "\030\uff5b\053\uff5b\056\uff5b\001\002\000\012\025\uff80\030" +
    "\uff80\053\uff80\056\uff80\001\002\000\004\053\uff82\001\002" +
    "\000\114\002\uff5d\003\uff5d\004\uff5d\005\uff5d\006\uff5d\007" +
    "\uff5d\010\uff5d\011\uff5d\012\uff5d\013\uff5d\014\uff5d\015\uff5d" +
    "\016\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d\024" +
    "\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d" +
    "\033\uff5d\034\uff5d\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052" +
    "\uff5d\053\uff5d\054\uff5d\055\uff5d\056\uff5d\063\uff5d\001\002" +
    "\000\012\025\uff5a\030\uff5a\053\uff5a\056\uff5a\001\002\000" +
    "\064\004\007\005\033\006\043\007\106\010\061\017\034" +
    "\020\063\021\110\022\066\023\024\024\051\025\uff59\027" +
    "\017\030\uff59\031\041\032\056\034\026\046\076\047\014" +
    "\050\111\052\067\053\uff59\054\065\055\025\056\uff59\001" +
    "\002\000\012\025\uff7f\030\uff7f\053\uff7f\056\uff7f\001\002" +
    "\000\054\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\025" +
    "\320\030\313\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\333\056\315\062\uffdc\001\002\000\010\025\320\030\313" +
    "\056\315\001\002\000\004\053\335\001\002\000\114\002" +
    "\uff5c\003\uff5c\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c" +
    "\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c\017" +
    "\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c" +
    "\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034" +
    "\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053\uff5c" +
    "\054\uff5c\055\uff5c\056\uff5c\063\uff5c\001\002\000\004\053" +
    "\337\001\002\000\114\002\uff84\003\uff84\004\uff84\005\uff84" +
    "\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84" +
    "\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\046\uff84\047\uff84\050\uff84" +
    "\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\063" +
    "\uff84\001\002\000\010\025\320\030\313\056\315\001\002" +
    "\000\004\053\342\001\002\000\114\002\uff5e\003\uff5e\004" +
    "\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e\011\uff5e\012\uff5e" +
    "\013\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021" +
    "\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e" +
    "\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\046\uff5e\047" +
    "\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\055\uff5e" +
    "\056\uff5e\063\uff5e\001\002\000\004\050\344\001\002\000" +
    "\022\011\074\012\021\013\011\014\070\015\016\016\010" +
    "\034\173\051\uffb9\001\002\000\004\051\346\001\002\000" +
    "\004\052\347\001\002\000\076\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa\034\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\063\uffaa\001\002\000\076\004\007\005\033\006\043\007" +
    "\106\010\061\011\074\012\021\013\011\014\070\015\016" +
    "\016\010\017\034\020\063\021\110\022\066\023\024\024" +
    "\051\026\012\027\017\031\041\032\056\034\026\046\076" +
    "\047\014\050\111\052\067\053\351\054\065\055\025\063" +
    "\055\001\002\000\106\002\uffad\003\uffad\004\uffad\005\uffad" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\026\uffad\027\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\063\uffad\001\002\000\114\002" +
    "\uff9a\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\063\uff9a\001\002\000\106\002" +
    "\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\026\ufff6" +
    "\027\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\046\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\063\ufff6\001\002\000\132\002\uffb0\003\uffb0\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\135\037\143\040" +
    "\133\041\134\042\142\043\136\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\061" +
    "\357\063\uffb0\001\002\000\114\002\uffaf\003\uffaf\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\063\uffaf\001\002\000\114\002\uffb2\003\uffb2\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\063\uffb2\001\002\000\114\002\uffb3\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\063\uffb3\001\002\000\114\002\uff77\003\uff77\004\uff77" +
    "\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013" +
    "\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77" +
    "\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030" +
    "\uff77\031\uff77\032\uff77\033\uff77\034\uff77\046\uff77\047\uff77" +
    "\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056" +
    "\uff77\063\uff77\001\002\000\114\002\uff9c\003\uff9c\004\uff9c" +
    "\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\046\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\063\uff9c\001\002\000\004\052\367\001\002\000\026" +
    "\004\007\005\033\006\043\007\106\010\061\034\123\046" +
    "\076\047\014\050\111\052\121\001\002\000\020\036\135" +
    "\037\143\040\133\041\134\042\142\043\136\051\365\001" +
    "\002\000\054\004\007\005\033\006\043\007\106\010\061" +
    "\017\034\020\063\021\110\022\066\023\024\024\051\027" +
    "\017\031\041\032\056\034\026\046\076\047\014\050\111" +
    "\052\067\054\065\055\025\001\002\000\114\002\uff93\003" +
    "\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93" +
    "\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\046" +
    "\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93" +
    "\055\uff93\056\uff93\063\uff93\001\002\000\054\004\007\005" +
    "\033\006\043\007\106\010\061\017\034\020\063\021\110" +
    "\022\066\023\024\024\051\027\017\031\041\032\056\034" +
    "\026\046\076\047\014\050\111\052\067\054\065\055\025" +
    "\001\002\000\004\053\371\001\002\000\114\002\uff68\003" +
    "\uff68\004\uff68\005\uff68\006\uff68\007\uff68\010\uff68\011\uff68" +
    "\012\uff68\013\uff68\014\uff68\015\uff68\016\uff68\017\uff68\020" +
    "\uff68\021\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026\uff68" +
    "\027\uff68\030\uff68\031\uff68\032\uff68\033\uff68\034\uff68\046" +
    "\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68" +
    "\055\uff68\056\uff68\063\uff68\001\002\000\054\004\007\005" +
    "\033\006\043\007\106\010\061\017\034\020\063\021\110" +
    "\022\066\023\024\024\051\027\017\031\041\032\056\034" +
    "\026\046\076\047\014\050\111\052\067\054\065\055\025" +
    "\001\002\000\114\002\uffa0\003\uffa0\004\uffa0\005\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\063\uffa0" +
    "\001\002\000\004\004\375\001\002\000\116\002\uff79\003" +
    "\uff79\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79" +
    "\012\uff79\013\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020" +
    "\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\046" +
    "\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79" +
    "\055\uff79\056\uff79\061\376\063\uff79\001\002\000\114\002" +
    "\uffa4\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\063\uffa4\001\002\000\006\003" +
    "\uff61\061\uff61\001\002\000\030\004\007\005\033\006\043" +
    "\007\106\010\061\034\123\046\076\047\014\050\111\051" +
    "\u0102\052\121\001\002\000\004\051\u0105\001\002\000\006" +
    "\003\uff5f\061\uff5f\001\002\000\004\003\u0104\001\002\000" +
    "\006\003\uff60\061\uff60\001\002\000\006\003\uff88\061\uff88" +
    "\001\002\000\004\035\227\001\002\000\006\003\u0110\034" +
    "\173\001\002\000\004\061\u0109\001\002\000\026\004\007" +
    "\005\033\006\043\007\106\010\061\034\123\046\076\047" +
    "\014\050\111\052\121\001\002\000\020\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\061\u010b\001\002\000" +
    "\026\004\007\005\033\006\043\007\106\010\061\034\123" +
    "\046\076\047\014\050\111\052\121\001\002\000\072\004" +
    "\007\005\033\006\043\007\106\010\061\017\034\020\063" +
    "\021\110\022\066\023\024\024\051\027\017\031\041\032" +
    "\056\034\026\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\046\076\047\014\050\111\051\u010e\052\067\054" +
    "\065\055\025\001\002\000\114\002\uff56\003\uff56\004\uff56" +
    "\005\uff56\006\uff56\007\uff56\010\uff56\011\uff56\012\uff56\013" +
    "\uff56\014\uff56\015\uff56\016\uff56\017\uff56\020\uff56\021\uff56" +
    "\022\uff56\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56\030" +
    "\uff56\031\uff56\032\uff56\033\uff56\034\uff56\046\uff56\047\uff56" +
    "\050\uff56\051\uff56\052\uff56\053\uff56\054\uff56\055\uff56\056" +
    "\uff56\063\uff56\001\002\000\054\004\007\005\033\006\043" +
    "\007\106\010\061\017\034\020\063\021\110\022\066\023" +
    "\024\024\051\027\017\031\041\032\056\034\026\046\076" +
    "\047\014\050\111\052\067\054\065\055\025\001\002\000" +
    "\114\002\uff58\003\uff58\004\uff58\005\uff58\006\uff58\007\uff58" +
    "\010\uff58\011\uff58\012\uff58\013\uff58\014\uff58\015\uff58\016" +
    "\uff58\017\uff58\020\uff58\021\uff58\022\uff58\023\uff58\024\uff58" +
    "\025\uff58\026\uff58\027\uff58\030\uff58\031\uff58\032\uff58\033" +
    "\uff58\034\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052\uff58" +
    "\053\uff58\054\uff58\055\uff58\056\uff58\063\uff58\001\002\000" +
    "\006\051\u0119\061\u011a\001\002\000\004\061\u0112\001\002" +
    "\000\026\004\007\005\033\006\043\007\106\010\061\034" +
    "\123\046\076\047\014\050\111\052\121\001\002\000\020" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\061" +
    "\u0114\001\002\000\026\004\007\005\033\006\043\007\106" +
    "\010\061\034\123\046\076\047\014\050\111\052\121\001" +
    "\002\000\072\004\007\005\033\006\043\007\106\010\061" +
    "\017\034\020\063\021\110\022\066\023\024\024\051\027" +
    "\017\031\041\032\056\034\026\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\046\076\047\014\050\111\051" +
    "\u0117\052\067\054\065\055\025\001\002\000\114\002\uff57" +
    "\003\uff57\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\011" +
    "\uff57\012\uff57\013\uff57\014\uff57\015\uff57\016\uff57\017\uff57" +
    "\020\uff57\021\uff57\022\uff57\023\uff57\024\uff57\025\uff57\026" +
    "\uff57\027\uff57\030\uff57\031\uff57\032\uff57\033\uff57\034\uff57" +
    "\046\uff57\047\uff57\050\uff57\051\uff57\052\uff57\053\uff57\054" +
    "\uff57\055\uff57\056\uff57\063\uff57\001\002\000\054\004\007" +
    "\005\033\006\043\007\106\010\061\017\034\020\063\021" +
    "\110\022\066\023\024\024\051\027\017\031\041\032\056" +
    "\034\026\046\076\047\014\050\111\052\067\054\065\055" +
    "\025\001\002\000\114\002\uff7c\003\uff7c\004\uff7c\005\uff7c" +
    "\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031" +
    "\uff7c\032\uff7c\033\uff7c\034\uff7c\046\uff7c\047\uff7c\050\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\063" +
    "\uff7c\001\002\000\054\004\007\005\033\006\043\007\106" +
    "\010\061\017\034\020\063\021\110\022\066\023\024\024" +
    "\051\027\017\031\041\032\056\034\026\046\076\047\014" +
    "\050\111\052\067\054\065\055\025\001\002\000\004\003" +
    "\u011b\001\002\000\004\051\u011c\001\002\000\054\004\007" +
    "\005\033\006\043\007\106\010\061\017\034\020\063\021" +
    "\110\022\066\023\024\024\051\027\017\031\041\032\056" +
    "\034\026\046\076\047\014\050\111\052\067\054\065\055" +
    "\025\001\002\000\114\002\uff54\003\uff54\004\uff54\005\uff54" +
    "\006\uff54\007\uff54\010\uff54\011\uff54\012\uff54\013\uff54\014" +
    "\uff54\015\uff54\016\uff54\017\uff54\020\uff54\021\uff54\022\uff54" +
    "\023\uff54\024\uff54\025\uff54\026\uff54\027\uff54\030\uff54\031" +
    "\uff54\032\uff54\033\uff54\034\uff54\046\uff54\047\uff54\050\uff54" +
    "\051\uff54\052\uff54\053\uff54\054\uff54\055\uff54\056\uff54\063" +
    "\uff54\001\002\000\114\002\uff55\003\uff55\004\uff55\005\uff55" +
    "\006\uff55\007\uff55\010\uff55\011\uff55\012\uff55\013\uff55\014" +
    "\uff55\015\uff55\016\uff55\017\uff55\020\uff55\021\uff55\022\uff55" +
    "\023\uff55\024\uff55\025\uff55\026\uff55\027\uff55\030\uff55\031" +
    "\uff55\032\uff55\033\uff55\034\uff55\046\uff55\047\uff55\050\uff55" +
    "\051\uff55\052\uff55\053\uff55\054\uff55\055\uff55\056\uff55\063" +
    "\uff55\001\002\000\106\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\026\ufff8\027\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\055\ufff8\063\ufff8\001\002\000\114\002" +
    "\uff99\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99" +
    "\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034" +
    "\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\056\uff99\063\uff99\001\002\000\134\002" +
    "\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\061\uffdf\062\uffdf\063\uffdf\001\002" +
    "\000\004\034\u0123\001\002\000\110\002\uffca\003\uffca\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\173\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\055\uffca\061\u0125\063\uffca" +
    "\001\002\000\004\061\u0128\001\002\000\106\002\uffc5\003" +
    "\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\063\uffc5" +
    "\001\002\000\110\002\uffcb\003\uffcb\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\061\u0127\063\uffcb\001\002\000\106" +
    "\002\uffc6\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026" +
    "\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\063\uffc6\001\002\000\106\002\uffc9\003\uffc9\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\063\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\006\021\003\054\004\001\001\000\106\004" +
    "\071\005\103\022\056\031\053\033\104\034\045\035\012" +
    "\036\063\041\047\042\057\046\074\050\021\052\022\055" +
    "\100\056\027\057\044\060\076\061\036\064\077\066\034" +
    "\071\035\074\030\075\052\076\106\077\026\100\041\101" +
    "\070\102\061\103\017\110\014\111\031\112\102\114\072" +
    "\115\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u0121\001\001\000\002\001\001\000\016\034\045\035" +
    "\012\036\121\041\u0120\042\057\114\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\033\u0107\036\u0105\115\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\034\045\035\012\036\121\041\167\042" +
    "\057\114\072\001\001\000\016\034\045\035\012\036\121" +
    "\041\353\042\057\114\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\034\045\035\012\036" +
    "\121\041\117\042\057\062\123\063\113\107\304\114\072" +
    "\001\001\000\010\007\234\036\232\051\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\004\230\033\104\034\045\035\012\036\063\041\047\042" +
    "\057\050\021\055\100\056\027\057\044\060\076\061\036" +
    "\064\077\066\034\071\035\075\052\076\106\077\026\103" +
    "\017\110\014\111\031\112\102\114\072\115\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\034\045\035" +
    "\012\036\121\041\202\042\204\114\072\001\001\000\070" +
    "\003\173\004\175\033\104\034\045\035\012\036\063\037" +
    "\152\041\174\042\057\050\021\055\100\056\027\057\044" +
    "\060\076\061\036\064\077\066\034\071\035\075\052\076" +
    "\106\077\026\103\017\110\014\111\031\112\102\114\072" +
    "\115\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\004\111\033\104\034\045" +
    "\035\012\036\063\041\047\042\057\050\021\055\100\056" +
    "\027\057\044\060\076\061\036\064\077\066\034\071\035" +
    "\075\052\076\106\077\026\103\017\110\014\111\031\112" +
    "\102\114\072\115\046\001\001\000\016\034\045\035\012" +
    "\036\121\041\167\042\057\114\072\001\001\000\002\001" +
    "\001\000\024\034\045\035\012\036\121\041\117\042\057" +
    "\062\123\063\113\107\114\114\072\001\001\000\020\034" +
    "\045\035\012\036\121\041\117\042\057\063\164\114\072" +
    "\001\001\000\002\001\001\000\022\034\045\035\012\036" +
    "\121\041\155\042\156\062\157\063\113\114\072\001\001" +
    "\000\002\001\001\000\004\044\140\001\001\000\020\034" +
    "\045\035\012\036\121\037\152\041\131\042\057\114\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\045" +
    "\035\012\036\121\037\127\041\131\042\057\114\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\045" +
    "\035\012\036\121\041\136\042\057\044\140\114\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\140\001\001\000\020\034" +
    "\045\035\012\036\121\037\144\041\131\042\057\114\072" +
    "\001\001\000\016\034\045\035\012\036\121\041\143\042" +
    "\057\114\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\034\045\035\012\036\121\041\117\042\057\062\166\063" +
    "\113\114\072\001\001\000\002\001\001\000\004\044\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\034\045\035\012\036\121" +
    "\041\136\042\057\044\140\114\072\001\001\000\066\003" +
    "\176\004\175\033\104\034\045\035\012\036\063\041\047" +
    "\042\057\050\021\055\100\056\027\057\044\060\076\061" +
    "\036\064\077\066\034\071\035\075\052\076\106\077\026" +
    "\103\017\110\014\111\031\112\102\114\072\115\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\140\001\001\000\016\034" +
    "\045\035\012\036\121\041\167\042\207\114\072\001\001" +
    "\000\002\001\001\000\064\004\206\033\104\034\045\035" +
    "\012\036\063\041\047\042\057\050\021\055\100\056\027" +
    "\057\044\060\076\061\036\064\077\066\034\071\035\075" +
    "\052\076\106\077\026\103\017\110\014\111\031\112\102" +
    "\114\072\115\046\001\001\000\002\001\001\000\064\004" +
    "\210\033\104\034\045\035\012\036\063\041\047\042\057" +
    "\050\021\055\100\056\027\057\044\060\076\061\036\064" +
    "\077\066\034\071\035\075\052\076\106\077\026\103\017" +
    "\110\014\111\031\112\102\114\072\115\046\001\001\000" +
    "\002\001\001\000\064\004\213\033\104\034\045\035\012" +
    "\036\063\041\047\042\057\050\021\055\100\056\027\057" +
    "\044\060\076\061\036\064\077\066\034\071\035\075\052" +
    "\076\106\077\026\103\017\110\014\111\031\112\102\114" +
    "\072\115\046\001\001\000\070\003\173\004\214\033\104" +
    "\034\045\035\012\036\063\037\152\041\174\042\057\050" +
    "\021\055\100\056\027\057\044\060\076\061\036\064\077" +
    "\066\034\071\035\075\052\076\106\077\026\103\017\110" +
    "\014\111\031\112\102\114\072\115\046\001\001\000\002" +
    "\001\001\000\066\003\176\004\175\033\104\034\045\035" +
    "\012\036\063\041\047\042\057\050\021\055\100\056\027" +
    "\057\044\060\076\061\036\064\077\066\034\071\035\075" +
    "\052\076\106\077\026\103\017\110\014\111\031\112\102" +
    "\114\072\115\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\034\045\035\012\036\121\037\220\041\222" +
    "\042\057\062\223\063\113\114\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\034\045\035\012\036\121" +
    "\041\136\042\057\044\140\114\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\034\045" +
    "\035\012\036\121\041\227\042\057\114\072\001\001\000" +
    "\004\044\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\237\022\236\024\243\025" +
    "\244\026\241\036\240\051\231\073\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\236\024\243\025\263\026\241\036\262\073\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\237\036\247\051\231\001\001\000\002\001" +
    "\001\000\010\007\251\036\247\051\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\254\001\001\000" +
    "\076\004\260\005\261\022\257\033\104\034\045\035\012" +
    "\036\063\041\047\042\057\046\074\050\021\055\100\056" +
    "\027\057\044\060\076\061\036\064\077\066\034\071\035" +
    "\072\255\075\052\076\106\077\026\102\061\103\017\110" +
    "\014\111\031\112\102\114\072\115\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\234\036\232\051" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\271\001\001\000" +
    "\004\027\266\001\001\000\076\004\260\005\261\022\257" +
    "\033\104\034\045\035\012\036\063\041\047\042\057\046" +
    "\074\050\021\055\100\056\027\057\044\060\076\061\036" +
    "\064\077\066\034\071\035\072\255\075\052\076\106\077" +
    "\026\102\061\103\017\110\014\111\031\112\102\114\072" +
    "\115\046\001\001\000\002\001\001\000\004\027\273\001" +
    "\001\000\076\004\260\005\261\022\257\033\104\034\045" +
    "\035\012\036\063\041\047\042\057\046\074\050\021\055" +
    "\100\056\027\057\044\060\076\061\036\064\077\066\034" +
    "\071\035\072\255\075\052\076\106\077\026\102\061\103" +
    "\017\110\014\111\031\112\102\114\072\115\046\001\001" +
    "\000\002\001\001\000\102\004\260\005\261\022\056\031" +
    "\276\033\104\034\045\035\012\036\063\041\047\042\057" +
    "\046\074\050\021\055\100\056\027\057\044\060\076\061" +
    "\036\064\077\066\034\071\035\072\255\074\030\075\052" +
    "\076\106\077\026\102\061\103\017\110\014\111\031\112" +
    "\102\114\072\115\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\236\024\301\026\241\036\262\073\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\034\045\035\012\036\121\041\306\042\057" +
    "\062\157\063\113\114\072\001\001\000\004\044\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\067\315" +
    "\070\316\113\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\003\326\004\175\033\104\034\045\035\012" +
    "\036\063\041\047\042\057\050\021\055\100\056\027\057" +
    "\044\060\076\061\036\064\077\066\034\071\035\075\052" +
    "\076\106\077\026\103\017\110\014\111\031\112\102\114" +
    "\072\115\046\001\001\000\002\001\001\000\010\067\324" +
    "\070\316\113\313\001\001\000\016\034\045\035\012\036" +
    "\121\041\320\042\057\114\072\001\001\000\070\003\322" +
    "\004\175\033\104\034\045\035\012\036\063\041\047\042" +
    "\057\044\140\050\021\055\100\056\027\057\044\060\076" +
    "\061\036\064\077\066\034\071\035\075\052\076\106\077" +
    "\026\103\017\110\014\111\031\112\102\114\072\115\046" +
    "\001\001\000\066\003\323\004\175\033\104\034\045\035" +
    "\012\036\063\041\047\042\057\050\021\055\100\056\027" +
    "\057\044\060\076\061\036\064\077\066\034\071\035\075" +
    "\052\076\106\077\026\103\017\110\014\111\031\112\102" +
    "\114\072\115\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\003\330\004\175\033\104\034\045\035\012\036" +
    "\063\041\047\042\057\050\021\055\100\056\027\057\044" +
    "\060\076\061\036\064\077\066\034\071\035\075\052\076" +
    "\106\077\026\103\017\110\014\111\031\112\102\114\072" +
    "\115\046\001\001\000\002\001\001\000\010\067\333\070" +
    "\316\113\313\001\001\000\010\067\335\070\316\113\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\067\340\070\316\113\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\022\236\024\243\025\344\026\241\036\262" +
    "\073\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\347\001\001\000\076\004\260\005\261\022\257" +
    "\033\104\034\045\035\012\036\063\041\047\042\057\046" +
    "\074\050\021\055\100\056\027\057\044\060\076\061\036" +
    "\064\077\066\034\071\035\072\255\075\052\076\106\077" +
    "\026\102\061\103\017\110\014\111\031\112\102\114\072" +
    "\115\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\034\045\035\012" +
    "\036\121\041\363\042\057\114\072\001\001\000\004\044" +
    "\140\001\001\000\064\004\365\033\104\034\045\035\012" +
    "\036\063\041\047\042\057\050\021\055\100\056\027\057" +
    "\044\060\076\061\036\064\077\066\034\071\035\075\052" +
    "\076\106\077\026\103\017\110\014\111\031\112\102\114" +
    "\072\115\046\001\001\000\002\001\001\000\066\003\367" +
    "\004\175\033\104\034\045\035\012\036\063\041\047\042" +
    "\057\050\021\055\100\056\027\057\044\060\076\061\036" +
    "\064\077\066\034\071\035\075\052\076\106\077\026\103" +
    "\017\110\014\111\031\112\102\114\072\115\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\004\372\033" +
    "\104\034\045\035\012\036\063\041\047\042\057\050\021" +
    "\055\100\056\027\057\044\060\076\061\036\064\077\066" +
    "\034\071\035\075\052\076\106\077\026\103\017\110\014" +
    "\111\031\112\102\114\072\115\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\034\045\035\012\036\121\037" +
    "\u0100\041\222\042\057\062\u0102\063\113\114\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\u0110\036\u0105\115\046\001\001\000\002\001\001\000" +
    "\016\034\045\035\012\036\121\041\202\042\u0109\114\072" +
    "\001\001\000\002\001\001\000\016\034\045\035\012\036" +
    "\121\041\202\042\u010b\114\072\001\001\000\064\004\u010c" +
    "\033\104\034\045\035\012\036\063\041\047\042\057\050" +
    "\021\055\100\056\027\057\044\060\076\061\036\064\077" +
    "\066\034\071\035\075\052\076\106\077\026\103\017\110" +
    "\014\111\031\112\102\114\072\115\046\001\001\000\002" +
    "\001\001\000\064\004\u010e\033\104\034\045\035\012\036" +
    "\063\041\047\042\057\050\021\055\100\056\027\057\044" +
    "\060\076\061\036\064\077\066\034\071\035\075\052\076" +
    "\106\077\026\103\017\110\014\111\031\112\102\114\072" +
    "\115\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\034\045\035\012\036\121\041\202" +
    "\042\u0112\114\072\001\001\000\002\001\001\000\016\034" +
    "\045\035\012\036\121\041\202\042\u0114\114\072\001\001" +
    "\000\064\004\u0115\033\104\034\045\035\012\036\063\041" +
    "\047\042\057\050\021\055\100\056\027\057\044\060\076" +
    "\061\036\064\077\066\034\071\035\075\052\076\106\077" +
    "\026\103\017\110\014\111\031\112\102\114\072\115\046" +
    "\001\001\000\002\001\001\000\064\004\u0117\033\104\034" +
    "\045\035\012\036\063\041\047\042\057\050\021\055\100" +
    "\056\027\057\044\060\076\061\036\064\077\066\034\071" +
    "\035\075\052\076\106\077\026\103\017\110\014\111\031" +
    "\112\102\114\072\115\046\001\001\000\002\001\001\000" +
    "\064\004\u011d\033\104\034\045\035\012\036\063\041\047" +
    "\042\057\050\021\055\100\056\027\057\044\060\076\061" +
    "\036\064\077\066\034\071\035\075\052\076\106\077\026" +
    "\103\017\110\014\111\031\112\102\114\072\115\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\004\u011c" +
    "\033\104\034\045\035\012\036\063\041\047\042\057\050" +
    "\021\055\100\056\027\057\044\060\076\061\036\064\077" +
    "\066\034\071\035\075\052\076\106\077\026\103\017\110" +
    "\014\111\031\112\102\114\072\115\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\140\001\001\000\002\001\001\000\010" +
    "\033\u0125\036\u0105\115\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

    /*
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
    */

    public void report_fatal_error(String message, Object info) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        System.out.println("Error fatal en línea " + (s.right+1));
        
    }
    
    public static void main(String[] args){
        try {
            System.out.println("Abriendo archivo " + args[0]);
            parser asin = new parser(
                    new AnalizadorLexicoCup( new FileReader(args[0])));
            asin.parse();
            System.out.println("\nPrograma analizado");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicial ::= programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= programa cosa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cosa ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosa",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cosa ::= funcion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosa",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cosa ::= error_cosa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosa",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // error_cosa ::= sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Sentencia no esperada fuera de una función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_cosa",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // error_cosa ::= error_simbolo_fuera_de_lugar 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Símbolo fuera de lugar"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_cosa",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // error_cosa ::= cosa LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Llave derecha suelta"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_cosa",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // error_cosa ::= error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error desconocido "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_cosa",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // error_cosa ::= error PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error desconocido , se leyó hasta siguiente punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_cosa",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // error_simbolo_fuera_de_lugar ::= PARIZQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_simbolo_fuera_de_lugar",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // error_simbolo_fuera_de_lugar ::= PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_simbolo_fuera_de_lugar",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // token_invalido ::= ERROR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error léxico en línea " + (iright+1)+", columna " + (ileft+1) + " causado por \""+i+"\"" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("token_invalido",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // t_dato ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // t_dato ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // t_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // t_dato ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // t_dato ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // t_dato ::= SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_dato",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor_numerico ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor_numerico ::= NUMERO_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor_numerico ::= NUMERO_OCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor_numerico ::= NUMERO_HEX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_numerico",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operador ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operador ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operador ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operador ::= DIVISION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operador ::= OP_LOGICO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operador ::= OP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacion ::= valor operador valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion ::= OP_INCDEC variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacion ::= variable OP_INCDEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacion ::= OP_NEGACION valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacion ::= error_operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // error_operacion ::= valor operador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en operación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_operacion",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= PARIZQ valor PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= valor_numerico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= IDENTIFICADOR PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor ::= IDENTIFICADOR PARIZQ elementos PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // array ::= LLAVEIZQ elementos LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array ::= LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // elementos ::= valor COMA elementos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // elementos ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elementos ::= valor valor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se espera una coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable ::= IDENTIFICADOR CORCHETEIZQ CORCHETEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable ::= IDENTIFICADOR CORCHETEIZQ NUMERO CORCHETEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // error_declaracion ::= t_dato variable 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_declaracion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // error_declaracion ::= CONST t_dato IDENTIFICADOR asignacion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_declaracion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // error_declaracion ::= CONST t_dato IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_declaracion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // error_declaracion ::= CONST t_dato IDENTIFICADOR error PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error no reconocido en declaración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_declaracion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion ::= t_dato declaracion_multiple PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion ::= t_dato variable PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion ::= CONST t_dato IDENTIFICADOR asignacion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion ::= CONST t_dato IDENTIFICADOR PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion ::= error_declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion ::= token_invalido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // error_declaracion_multiple ::= IDENTIFICADOR declaracion_multiple 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta una coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_declaracion_multiple",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion_multiple ::= variable COMA declaracion_multiple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_multiple",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion_multiple ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_multiple",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion_multiple ::= error_declaracion_multiple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_multiple",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asignacion ::= variable IGUAL valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // asignacion ::= error_asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // error_asignacion ::= variable IGUAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta valor en asignacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_asignacion",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros_opc ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_opc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_opc ::= parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_opc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametro ::= t_dato variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametro ::= parametro_error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametro_error ::= variable 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta tipo de dato del argumento."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_error",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametro_error ::= t_dato 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta el argumento"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_error",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // return ::= RETURN valor PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // return ::= RETURN PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // return ::= error_return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // error_return ::= RETURN valor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_return",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // error_return ::= RETURN error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Return Inválido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_return",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // funcion ::= t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // funcion ::= VOID IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // funcion ::= funcion_error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dentro_funcion ::= dentro_funcion cosa_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentro_funcion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dentro_funcion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentro_funcion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cosa_funcion ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosa_funcion",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cosa_funcion ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cosa_funcion",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia ::= asignacion PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia ::= IDENTIFICADOR OP_ATRIBUCION NUMERO PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia ::= valor PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia ::= return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencia ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia ::= sentencia_if ELSE sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencia ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia ::= instruccion PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia ::= sentencia_llaves 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencia ::= BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia ::= CONTINUE PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia ::= sentencia_do 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia ::= ELSE sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Else solo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia ::= error_sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia_llaves ::= LLAVEIZQ sentencias LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llaves",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia_llaves ::= LLAVEIZQ sentencias error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error posiblemente causado por no cerrar la llave {"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_llaves",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia_if ::= IF PARIZQ valor PARDER sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia_if ::= error_sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencia_while ::= WHILE PARIZQ operacion PARDER sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencia_while ::= WHILE PARIZQ operacion PARDER LLAVEIZQ sentencia LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia_while ::= error_sentencia_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // argumentos ::= argumento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // argumentos ::= argumento COMA argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // argumentos ::= argumento argumento 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se esperaba una coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // argumento ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // instruccion ::= READ PARIZQ elementos PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // instruccion ::= READ PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // instruccion ::= WRITE PARIZQ elementos PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // instruccion ::= error_instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia_do ::= DO sentencia WHILE PARIZQ operacion PARDER PCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia_do ::= error_sentencia_do 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_do",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_switch ::= SWITCH PARIZQ valor PARDER LLAVEIZQ cases LLAVEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia_switch ::= error_sentencia_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cases ::= sentencia_case cases 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cases ::= sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia_case ::= CASE valor DOSPUNTOS sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_case ::= DEFAULT DOSPUNTOS sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_case ::= CASE valor DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_case ::= error_sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia_for ::= FOR PARIZQ asignacion PCOMA operacion PCOMA operacion PARDER sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia_for ::= error_sentencia_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // error_sentencia ::= asignacion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // error_sentencia ::= IDENTIFICADOR OP_ATRIBUCION NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // error_sentencia ::= valor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // error_sentencia ::= instruccion error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error por punto y coma no encontrado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // error_sentencia ::= BREAK 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // error_sentencia ::= CONTINUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // funcion_error ::= t_dato IDENTIFICADOR PARIZQ parametros_opc LLAVEIZQ dentro_funcion LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // funcion_error ::= t_dato IDENTIFICADOR parametros_opc PARDER LLAVEIZQ dentro_funcion LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // funcion_error ::= t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER dentro_funcion LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // funcion_error ::= t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion funcion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+ ": Falta cerrar llave de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // funcion_error ::= t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+ ": Error en función. Probablemente faltó cerrar la llave"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // funcion_error ::= t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion error LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+ ": Error no reconocido dentro de la función"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_error",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // error_parentesis ::= PARIZQ argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // error_parentesis ::= argumentos PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // error_parentesis ::= PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // error_parentesis ::= PARIZQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // error_parentesis ::= argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // error_parentesis ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_parentesis",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // error_sentencia_if ::= IF error LLAVEIZQ sentencias LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura de If inválida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_if",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // error_sentencia_while ::= WHILE operacion PARDER sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_while",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // error_sentencia_while ::= WHILE PARIZQ operacion sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_while",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // error_sentencia_do ::= DO sentencia WHILE error_parentesis PCOMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_do",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // error_sentencia_do ::= DO sentencia WHILE PARIZQ operacion PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_do",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // error_instruccion ::= READ PARIZQ argumentos error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis derecho"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_instruccion",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // error_instruccion ::= READ error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Paréntesis izquierdo esperado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_instruccion",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // error_instruccion ::= WRITE error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Paréntesis izquierdo esperado"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_instruccion",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // error_instruccion ::= WRITE PARIZQ argumentos error 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis derecho"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_instruccion",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // error_instruccion ::= WRITE PARIZQ PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Función write necesita argumentos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_instruccion",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // error_sentencia_switch ::= SWITCH error_parentesis LLAVEIZQ cases LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_switch",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // error_sentencia_switch ::= SWITCH PARIZQ error PARDER LLAVEIZQ cases LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en estructura del switch");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_switch",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // error_sentencia_switch ::= SWITCH PARIZQ valor PARDER cases LLAVEDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta la llave");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_switch",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // error_sentencia_case ::= CASE valor sentencias 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta dos puntos");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_case",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // error_sentencia_case ::= DOSPUNTOS sentencias 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta el caso");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_case",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // error_sentencia_case ::= DEFAULT DOSPUNTOS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Caso default vacío");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_case",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // error_sentencia_for ::= FOR asignacion PCOMA operacion PCOMA operacion PARDER sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_for",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // error_sentencia_for ::= FOR PARIZQ asignacion PCOMA operacion PCOMA operacion sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_for",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // error_sentencia_for ::= FOR asignacion PCOMA operacion PCOMA operacion sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_for",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // error_sentencia_for ::= FOR PARIZQ error PARDER sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura del for incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_for",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // error_sentencia_for ::= FOR PARIZQ error PCOMA error PARDER sentencia 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura del for incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("error_sentencia_for",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
