package analizadorlexico;

import java_cup.runtime.Symbol;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Arrays;

action code
{:
:};


parser code
{:
    public class simbolo {
        Object id;
        Object tipo;
        Object valor;
        private Integer cantidadParametros;
        Object[] tipoParametros;

        simbolo(Object id, Object tipo, Integer cp, Object [] tp){
            this.id = id;
            this.tipo = tipo;
            this.cantidadParametros = cp;
            this.tipoParametros = tp;
        }

        simbolo(Object id, Object tipo, Object valor){
            this.id = id;
            this.tipo = tipo;
            this.valor = valor;
        }

        simbolo(Object id, Object tipo){
            this.id = id;
            this.tipo = tipo;
        }

        public String toString(){
            String s = this.id.toString();
            if (this.tipo != null) s += "\t" + this.tipo.toString();
            if (this.valor != null) s += "\t" + this.valor.toString();
            if (this.cantidadParametros != null) s += "\t" + this.cantidadParametros;
            if (this.tipoParametros != null) s += "\t" + Arrays.toString(this.tipoParametros);
            return s;
        }
    }

    // TABLA DE SIMBOLOS
    static HashMap<Object, simbolo> TablaSimbolos = new HashMap<Object, simbolo>();

    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }


    public void report_fatal_error(String message, Object info) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        System.out.println("Error fatal en línea " + (s.right+1));
        
    }
    
    public static void main(String[] args){
        try {
            System.out.println("Abriendo archivo " + args[0]);
            parser asin = new parser(
                    new AnalizadorLexicoCup( new FileReader(args[0])));
            asin.parse();
            System.out.println("    -----TABLA DE SIMBOLOS-----");
            //System.out.println(TablaSimbolos);
            for (HashMap.Entry<Object, simbolo> entry : TablaSimbolos.entrySet()) {
                System.out.println(entry.getKey().toString() + "\t:\t " + entry.getValue().toString());
            }
            System.out.println("\nPrograma analizado");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

:};

terminal NUMERO, NUMERO_OCT, NUMERO_HEX, NUMERO_FLOAT, LITERAL, LONG, INT,
    CHAR, FLOAT, DOUBLE, SHORT, IF, ELSE, DO, WHILE, FOR, BREAK, CASE, CONST, CONTINUE, 
    DEFAULT, RETURN, SWITCH, VOID, IDENTIFICADOR, IGUAL, SUMA, RESTA, MULTIPLICACION, DIVISION, 
    OP_LOGICO, OP_RELACIONAL, OP_BOOLEANO, OP_ATRIBUCION, OP_INCDEC, OP_NEGACION, 
    PARIZQ, PARDER, LLAVEIZQ, LLAVEDER, READ, WRITE, DOSPUNTOS,
    CORCHETEIZQ, CORCHETEDER, PCOMA, COMA, MODULO,
    ERROR
;


non terminal Object inicio, sentencias, sentencia, declaracion, declaracion_for,
    while, do_while, variables, funciones, valor_numerico, t_dato,
    programa, 
    parametro, dentro_funcion, cuerpo, funcion, tipo, asignacion,
    array, variable, elemento, valor, operacion, operaciones, operador, 
    error_declaracion, error_return, error_declaracion_multiple, 
    cosa, cosas, inicial, return, sentencia_if,
    sentencia_llaves, sentencia_while, instruccion, argumentos, argumento, sentencia_do,
    sentencia_else, sentencia_switch, cases, sentencia_case, sentencia_for, cosa_funcion, parametro_error,
    funcion_error, error_sentencia_if, error_sentencia,error_sentencia_while,error_simbolo_fuera_de_lugar,
    error_cosa, token_invalido, error_sentencia_for, error_estructura_control, estructura_control,
    token_control, error_parentesis, error_sentencia_do, error_instruccion, error_sentencia_switch, error_sentencia_case,
    error_operacion, error_asignacion
;

non terminal Object[] declaracion_multiple, resto_declaracion_multiple, parametros, parametros_opc, resto_parametros, elementos, resto_elementos
;

precedence right INT;
precedence right CHAR;
precedence right ELSE; 
precedence right LONG;
precedence right FLOAT;
precedence right DOUBLE;
precedence right SHORT;
precedence right NUMERO_FLOAT;
precedence right NUMERO_HEX;
precedence right NUMERO_OCT;
precedence right NUMERO;
precedence right LITERAL;
precedence left RETURN;



precedence left SUMA;
precedence left RESTA;
precedence left MULTIPLICACION;
precedence left DIVISION;
precedence left OP_LOGICO;
precedence left OP_RELACIONAL;
precedence right OP_INCDEC;
precedence left MODULO;

precedence right IDENTIFICADOR;
precedence right WHILE;

precedence left PARDER;
precedence left PARIZQ;
precedence left LLAVEDER;
precedence left LLAVEIZQ;
precedence left CORCHETEDER;
precedence left CORCHETEIZQ;
precedence left PCOMA;
precedence left OP_LOGICO;
precedence left OP_NEGACION;
precedence left CONST;
precedence left VOID;
precedence left COMA;
precedence left ERROR;


start with inicial;


inicial ::= programa funcion | programa error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en estructura de programa. "+
    "Revise que haya al menos una función y que no haya declaraciones al final "); :}
;

programa ::= programa cosa | /*vacio*/
;


cosa ::= declaracion | funcion:i  
    | error_cosa 
;

error_cosa ::= 
    sentencia:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Sentencia no esperada fuera de una función"); :} |
    error_simbolo_fuera_de_lugar:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Símbolo fuera de lugar"); :} |
    cosa LLAVEDER:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Llave derecha sin una llave izquierda respectiva."); :} |
    error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error desconocido "); :} |
    error:i PCOMA {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error desconocido, se leyó hasta siguiente punto y coma"); :}
;

error_simbolo_fuera_de_lugar ::=
    PARIZQ | PARDER 
;

token_invalido ::= 
    ERROR:i {: System.out.println("Error léxico en línea " + (iright+1)+", columna " + (ileft+1) + " causado por \""+i+"\"" ); :}
;


t_dato ::= 
    LONG:t {: RESULT = t; :} | 
    INT:t {: RESULT = t; :} | 
    CHAR:t {: RESULT = t; :} | 
    FLOAT:t {: RESULT = t; :} | 
    DOUBLE:t {: RESULT = t; :} | 
    SHORT:t {: RESULT = t; :}
;

valor_numerico ::=
    NUMERO:n
        {: RESULT = n; :}
    | 
    NUMERO_FLOAT:n
        {: RESULT = n; :}
    | 
    NUMERO_OCT:n
        {: RESULT = n; :} 
    | 
    NUMERO_HEX:n
        {: RESULT = n; :}
;

operador ::= SUMA | RESTA | MULTIPLICACION | DIVISION | OP_LOGICO | OP_RELACIONAL | MODULO
;

operacion ::= valor operador valor | OP_INCDEC variable | variable OP_INCDEC | OP_NEGACION valor 
    | error_operacion
;

error_operacion ::=
    valor operador:i  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en operación"); :}
;

valor ::= PARIZQ valor:v PARDER {: RESULT = v; :} | valor_numerico | LITERAL:l {: RESULT = l; :} | array | operacion 
    | variable:var
    {:
        if (TablaSimbolos.get(var) == null || TablaSimbolos.get(var).cantidadParametros != null) System.out.println("Error en línea " + (varright+1) + ": Variable no definida  \"" + var + "\"");
        RESULT = var;
    :}
    | 
    IDENTIFICADOR:id PARIZQ PARDER
    {:
        if(TablaSimbolos.get(id) == null){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Símbolo no definido \"" + id + "\"");
        } else if (TablaSimbolos.get(id).cantidadParametros == null || TablaSimbolos.get(id).cantidadParametros != 0){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Cantidad incorrecta de parámetros para \"" + id + "\"");
        }
    :}
    | 
    IDENTIFICADOR:id PARIZQ elementos:e PARDER
    {:
        if(TablaSimbolos.get(id) == null){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Símbolo no definido \"" + id + "\"");
        } else if (TablaSimbolos.get(id).cantidadParametros == null || TablaSimbolos.get(id).cantidadParametros != e.length){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Cantidad incorrecta de parámetros para \"" + id + "\"");
        } else {
            Object[] arr = new Object[e.length];
            for (int i = 0; i< e.length; i++){
                if (TablaSimbolos.get(e[i]) == null) System.out.println("Error en línea " + (eright+1)+": Símbolo no definido \"" + e[i] + "\"");
                arr[i] = TablaSimbolos.get(e[i]).tipo;
            }
            if (!Arrays.equals(arr, TablaSimbolos.get(id).tipoParametros)) System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Tipos incorrectos de parámetros para \"" + id + "\"");
        }
    :}
    |
    asignacion
;


array ::= LLAVEIZQ elementos LLAVEDER | LLAVEIZQ LLAVEDER 
    | LLAVEIZQ error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave derecha"); :}
;

elementos ::= 
    valor:v resto_elementos:e
    {:
        int len = e.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i+1] = e[i];
        }
        arr[0] = v;
        RESULT = arr; 
    :}
    | valor:i valor {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se espera una coma"); :}   
    | valor:i COMA {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se espera un valor después de la coma"); :}
;

resto_elementos ::=
    /* VACIO */
    {:
        Object[] arr = {};
        RESULT = arr;
    :}
    |
    COMA valor:v resto_elementos:e
    {:
        int len = e.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i+1] = e[i];
        }
        arr[0] = v;
        RESULT = arr; 
    :}
;

variable ::= IDENTIFICADOR:id {: RESULT =id; :} | IDENTIFICADOR CORCHETEIZQ CORCHETEDER | IDENTIFICADOR CORCHETEIZQ NUMERO CORCHETEDER
;

error_declaracion ::= 
    t_dato variable:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); :} 
    | CONST t_dato IDENTIFICADOR asignacion:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); :} 
    | CONST t_dato IDENTIFICADOR:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); :}  
    | CONST t_dato IDENTIFICADOR error:i PCOMA {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error no reconocido en declaración"); :} 
;

declaracion ::= 
    t_dato:tipo declaracion_multiple:d 
    {: 
        int len = d.length;
        for (int i = 0; i<len; i++) {
            if (TablaSimbolos.get(d[i]) != null){
                System.out.println("Error en línea " + (dright+1) + ": Múltiple declaración de símbolo  \"" + d[i] + "\"");
            } else {
                TablaSimbolos.put(d[i], new simbolo(d[i], tipo));
            }
        }
    :} PCOMA
    |
    t_dato:tipo variable:id PCOMA 
    {:
        if (TablaSimbolos.get(id) != null){
            System.out.println("Error en línea " + (idright+1) + ": Múltiple declaración de símbolo  \"" + id + "\"");
        } else {
            TablaSimbolos.put(id, new simbolo(id, tipo));
        }
    :}
    |
    CONST t_dato:tipo IDENTIFICADOR:id asignacion:valor PCOMA
    {:
        System.out.println("hola");
        //TablaSimbolos.put(id, new simbolo(id, tipo, valor));
    :}
    |
    CONST t_dato:tipo IDENTIFICADOR:id PCOMA
    {:
        TablaSimbolos.put(id, new simbolo(id, tipo));
    :}
    |
    error_declaracion |
    token_invalido
    
;
error_declaracion_multiple ::=
    IDENTIFICADOR:i declaracion_multiple {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta una coma"); :}
;

declaracion_multiple ::= 
    variable:v resto_declaracion_multiple:d 
    {: 
        int len = d.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i] = d[i];
        }
        arr[len] = v;
        RESULT = arr;
    :} 
;

resto_declaracion_multiple ::=
    /* vacio */
    {:
        Object[] arr = {};
        RESULT = arr;
    :}
    |
    COMA variable:v resto_declaracion_multiple:r
    {:
        int len = r.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i] = r[i];
        }
        arr[len] = v;
        RESULT = arr; 
    :}
;

asignacion ::=
    variable:var IGUAL valor:v 
    {:
        if (TablaSimbolos.get(var) == null || TablaSimbolos.get(var).cantidadParametros != null) System.out.println("Error en línea " + (varright+1) + ": Variable no definida  \"" + var + "\""); 
        RESULT = v;
    :}
    | t_dato variable IGUAL valor:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": No se puede declarar y asignar una variable en la misma sentencia"); :}
    | error_asignacion
;

error_asignacion ::= 
    variable IGUAL error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se esperaba expresión en asignación"); :}
;

parametros_opc ::= 
    /*vacio*/ 
    {:
        Object[] arr = {};
        RESULT = arr;
    :}
    | 
    parametros:p
    {:
        RESULT = p;
    :}
;

parametros ::= 
    parametro:p resto_parametros:ps
    {:
        int len = ps.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i+1] = ps[i];
        }
        arr[0] = p;
        RESULT = arr; 
    :}
;

resto_parametros ::= 
    /* vacio */
    {:
        Object[] arr = {};
        RESULT = arr;    
    :}    
    |
    COMA parametro:p resto_parametros:ps
    {:
        int len = ps.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i+1] = ps[i];
        }
        arr[0] = p;
        RESULT = arr; 
    :}
;

parametro ::= 
    t_dato:t variable
    {:
        RESULT = t;
    :}
    | 
    parametro_error
;

parametro_error ::= 
    variable:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta tipo de dato del argumento."); :} | 
    t_dato:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta el argumento"); :}
;

return ::= RETURN valor PCOMA | RETURN PCOMA | error_return 
;

error_return::=
    RETURN valor:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :}|
    RETURN error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Return Inválido"); :}
;

funcion ::=
    t_dato:tipo IDENTIFICADOR:id PARIZQ parametros_opc:p PARDER LLAVEIZQ dentro_funcion LLAVEDER
    {:
        if(TablaSimbolos.get(id) != null){
            System.out.println("Error en línea " + (idright+1) + ": Múltiple declaración de símbolo  \"" + id + "\"");
        } else {
            TablaSimbolos.put(id, new simbolo(id, tipo, p.length, p));
        }
    :}
    | 
    VOID:v IDENTIFICADOR:id PARIZQ parametros_opc:p PARDER LLAVEIZQ dentro_funcion LLAVEDER
    {:
        TablaSimbolos.put(id, new simbolo(id, v, p.length, p));
    :}
    | 
    funcion_error
;



dentro_funcion ::= dentro_funcion cosa_funcion | /*vacio*/ 
;

cosa_funcion ::= declaracion | sentencia
;

sentencias ::= 
    sentencia sentencias | sentencia
;

sentencia ::=
    asignacion PCOMA  
    |
    IDENTIFICADOR OP_ATRIBUCION NUMERO PCOMA // a+=1;
    | valor PCOMA
    | return 
    | sentencia_if
    | sentencia_if ELSE sentencia
    | sentencia_while
    | sentencia_switch
    | sentencia_for
    | instruccion PCOMA
    | sentencia_llaves
    | BREAK PCOMA
    | CONTINUE PCOMA
    | sentencia_do
    | ELSE:i sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Hay un else solito :( "); :}
    | error_sentencia
    
;




sentencia_llaves ::= LLAVEIZQ sentencias LLAVEDER
    | LLAVEIZQ:i sentencias error {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error posiblemente causado por no cerrar la llave {"); :}
;

sentencia_if ::= IF PARIZQ valor PARDER sentencia
    | error_sentencia_if
    | error_estructura_control
;



sentencia_while ::= WHILE PARIZQ operacion PARDER sentencia | WHILE PARIZQ operacion PARDER LLAVEIZQ sentencia LLAVEDER 
     | error_sentencia_while 
;


argumentos ::= argumento | argumento COMA argumentos | argumento:i argumento {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se esperaba una coma"); :}
;

argumento ::= valor 
;

instruccion ::= 
    READ PARIZQ elementos PARDER  | READ PARIZQ PARDER  | WRITE PARIZQ elementos PARDER 
    | error_instruccion
; 

sentencia_do ::= 
    DO sentencia WHILE PARIZQ operacion PARDER PCOMA
    | error_sentencia_do
;

sentencia_switch ::= SWITCH PARIZQ valor PARDER LLAVEIZQ cases LLAVEDER
    | error_sentencia_switch
;

cases ::= sentencia_case cases | sentencia_case;

sentencia_case ::= CASE valor DOSPUNTOS sentencias | DEFAULT DOSPUNTOS sentencias |  CASE valor DOSPUNTOS | error_sentencia_case
;

sentencia_for ::= FOR PARIZQ asignacion PCOMA operacion PCOMA operacion PARDER sentencia | error_sentencia_for
;

/* ERRORES CREISI */

error_sentencia ::=
    IDENTIFICADOR OP_ATRIBUCION NUMERO:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} | 
    valor:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} |
    instruccion error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error por punto y coma no encontrado"); :} |
    BREAK:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} |
    CONTINUE:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :}
;

funcion_error ::=
    t_dato IDENTIFICADOR PARIZQ parametros_opc:i LLAVEIZQ dentro_funcion LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} | 
    t_dato IDENTIFICADOR parametros_opc:i PARDER LLAVEIZQ dentro_funcion LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} |
    t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER:i dentro_funcion LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave"); :} 
    | t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion funcion:i {: System.out.println("Error en línea " + (iright+1)+ ": Falta cerrar llave de la función"); :}
    | t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion error:i {: System.out.println("Error en línea " + (iright+1)+ ": Error en función. Probablemente faltó cerrar la llave"); :}
    | t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion error:i LLAVEDER {: System.out.println("Error en línea " + (iright+1)+ ": Error no reconocido dentro de la función"); :}
;

error_parentesis ::=    
    PARIZQ argumentos |
    argumentos PARDER |
    PARDER |
    PARIZQ |
    argumentos |
    /* vacio */       
;

error_sentencia_if ::= 
    IF:i error LLAVEIZQ sentencias LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura de If inválida"); :}
;

error_sentencia_while ::= 
    WHILE:i operacion PARDER sentencia  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} | 
    WHILE PARIZQ operacion:i sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} 
;

error_sentencia_do ::= 
    DO sentencia WHILE error_parentesis:i PCOMA {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :}|
    DO sentencia WHILE PARIZQ operacion PARDER:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :}   
;

error_instruccion ::=
    READ PARIZQ  argumentos error:i  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis derecho"); :}
    | READ:i error  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Paréntesis izquierdo esperado"); :}
    | WRITE:i error  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Paréntesis izquierdo esperado"); :}
    | WRITE PARIZQ argumentos:i error  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis derecho"); :}
    | WRITE PARIZQ:i PARDER  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Función write necesita argumentos"); :}
;

error_sentencia_switch ::= 
    SWITCH error_parentesis:i LLAVEIZQ cases LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");:} | 
    SWITCH:i PARIZQ error PARDER LLAVEIZQ cases LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en estructura del switch");:} |
    SWITCH PARIZQ valor PARDER:i cases LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta la llave");:}
;

error_sentencia_case ::= 
    CASE valor:i sentencias {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta dos puntos");:}  | 
    DOSPUNTOS:i sentencias {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta el caso");:} |
    DEFAULT DOSPUNTOS:i  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Caso default vacío");:} 
;

error_sentencia_for ::= 
    FOR:i asignacion PCOMA operacion PCOMA operacion PARDER sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");:} | 
    FOR PARIZQ asignacion PCOMA operacion PCOMA operacion:i sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");:} | 
    FOR:i asignacion PCOMA operacion PCOMA operacion sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");:} |
    FOR:i PARIZQ error PARDER sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura del for incorrecta");:} |
    FOR:i PARIZQ error PCOMA error PARDER sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura del for incorrecta");:} 
;