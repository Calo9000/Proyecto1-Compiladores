package analizadorlexico;

import java_cup.runtime.Symbol;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Arrays;
import java.util.Stack;
import java.util.ArrayList;
import java.io.FileWriter;

action code
{:
:};


parser code
{:
    public class simbolo {
        Object id;
        Object tipo;
        Object valor;
        private Integer cantidadParametros;
        Object[] tipoParametros;

        simbolo(Object id, Object tipo, Integer cp, Object [] tp){
            this.id = id;
            this.tipo = tipo;
            this.cantidadParametros = cp;
            this.tipoParametros = tp;
        }

        simbolo(Object id, Object tipo, Object valor){
            this.id = id;
            this.tipo = tipo;
            this.valor = valor;
        }

        simbolo(Object id, Object tipo){
            this.id = id;
            this.tipo = tipo;
        }

        public String toString(){
            String s = this.id.toString();
            if (this.tipo != null) s += "\t" + this.tipo.toString();
            if (this.valor != null) s += "\tvalor: " + this.valor.toString();
            if (this.cantidadParametros != null) s += "\t" + this.cantidadParametros;
            if (this.tipoParametros != null) s += "\t" + Arrays.toString(this.tipoParametros);
            return s;
        }
    }

    // Clase de Registro Semántico
    public class RS {
        String clase; // Si es id, while, for, do (data object), operador, etc.
        Object nombre; // el símbolo. si es un operador el simbolo va aquí. si es una variale o funcion, es el id 
        Object tipo; // tipo de dato
        Object[] valor; // valor si es un DO
    
        RS(String clase){
            this.clase = clase;
        }

        RS(String clase, Object nombre){
            this.clase = clase;
            this.nombre = nombre;
        }

        RS(String clase, Object nombre, Object[] valor){
            this.clase = clase;
            this.nombre = nombre;
            this.valor = valor;
        }

        RS(String clase, Object nombre, Object tipo, Object[] valor){
            this.clase = clase;
            this.nombre = nombre;
            this.tipo = tipo;
            this.valor = valor;
        }
    
        public boolean equals(Object o){
            if (o == this) {
                return true;
            }
            if (!(o instanceof RS)) {
                return false;
            }
            RS rs = (RS) o;

            return rs.clase.equals(this.clase); 
                    /*
                    &&
                    rs.nombre.equals(this.nombre) &&
                    rs.tipo.equals(this.tipo) &&
                    rs.valor.equals(this.valor);
                    */

        }
    }

    // Clase de pila semantica
    public class PilaSemantica {
        private Stack<RS> ps;

        public PilaSemantica(){
            ps = new Stack<>();
        }

        public RS peek(){
            return ps.peek();
        }

        public void push(String clase){
            //System.out.println("haciendo push de " + clase);
            ps.push(new RS(clase));
        }

        public void push(String clase, Object nombre){
            //System.out.println("haciendo push de " + nombre);
            ps.push(new RS(clase, nombre));
        }

        public void push(String clase, Object nombre, Object[] valor){
            //System.out.println("haciendo push de " + nombre);
            ps.push(new RS(clase, nombre, valor));
        }

        public void push(RS r){
            //System.out.println("haciendo push de " + r.nombre);
            ps.push(r);
        }

        public RS pop(){
            //System.out.println("haciendo pop de " + ps.peek().nombre + " " + ps.peek().clase);
            return ps.pop();
        }

        public int search(String clase){
            return ps.search(new RS(clase));
        }

    }

    // TABLA DE SIMBOLOS
    static HashMap<Object, simbolo> TablaSimbolos = new HashMap<Object, simbolo>();

    // PILA SEMANTICA
    PilaSemantica pilaSemantica = new PilaSemantica();

    //  CODIGO ENSAMBLADOR
    static String ensamblador = "";

    static String code_segment = "global main \n\nsection .text";

    public static class Labels {
        private HashMap<String,String> l;

        public Labels() {
            l = new HashMap<String,String>();
        }

        public void append(String key, String value){
            String v = this.l.get(key);
            if(v != null) value = v + value;
            this.l.put(key, value);
        }

        public String getLabels(){
            String str = "";
            for (HashMap.Entry<String, String> entry : this.l.entrySet()) {
                //System.out.println("printeando " + entry.getKey());
                str += entry.getValue();
            }
            return str;
        }

        public String getNumeroLabel(){
            return String.valueOf(l.size());
        }

    }

    static Labels labels = new Labels();

    static Stack<String> labelStack = new Stack<>();

    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }


    public void report_fatal_error(String message, Object info) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
        System.out.println("Error fatal en línea " + (s.right+1));
        
    }
    
    public static void main(String[] args){
        try {
            //  INICIALIZAR PILA DE LABELS EN MAIN
            labelStack.push("\nmain");

            // AGREGAR LA LABEL DE MAIN
            labels.append(labelStack.peek(), "\nmain:");
            System.out.println("Abriendo archivo " + args[0]);
            parser asin = new parser(
                    new AnalizadorLexicoCup( new FileReader(args[0])));
            asin.parse();
            System.out.println("    -----TABLA DE SIMBOLOS-----");

            // AGREGAR LAS VARIABLES A LA SECCION DE DATOS            
            String data_segment = "section .data\n";


            for (HashMap.Entry<Object, simbolo> entry : TablaSimbolos.entrySet()) {
                System.out.println(entry.getKey().toString() + "\t:\t " + entry.getValue().toString()); // imprimir tabla de simbolos
                simbolo s = entry.getValue();
                if (s.cantidadParametros == null) { // es una variable
                    data_segment +=  s.id.toString() + " dd " + s.valor.toString() + "\n";
                }
            }
            System.out.println("\nPrograma analizado");
            
            ensamblador = data_segment + code_segment+ labels.getLabels();
            //ensamblador += code_segment;

            System.out.println(ensamblador);

            //  CREA EL ARCHIVO
            FileWriter texto = new FileWriter(args[0].split("\\.")[0] + ".asm", false);
            texto.write(ensamblador);
            texto.close();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

:};

terminal NUMERO, NUMERO_OCT, NUMERO_HEX, NUMERO_FLOAT, LITERAL, LONG, INT,
    CHAR, FLOAT, DOUBLE, SHORT, IF, ELSE, DO, WHILE, FOR, BREAK, CASE, CONST, CONTINUE, 
    DEFAULT, RETURN, SWITCH, VOID, IDENTIFICADOR, IGUAL, SUMA, RESTA, MULTIPLICACION, DIVISION, 
    OP_LOGICO, OP_RELACIONAL, OP_BOOLEANO, OP_ATRIBUCION, OP_INCDEC, OP_NEGACION, 
    PARIZQ, PARDER, LLAVEIZQ, LLAVEDER, READ, WRITE, DOSPUNTOS,
    CORCHETEIZQ, CORCHETEDER, PCOMA, COMA, MODULO,
    ERROR
;


non terminal Object sentencias, sentencia, declaracion, declaracion_for,
    while, valor_numerico, t_dato,
    programa, 
    parametro, dentro_funcion, cuerpo, funcion, tipo, asignacion,
    array, variable, elemento, valor, operacion, operaciones, operador, 
    error_declaracion, error_return, error_declaracion_multiple, 
    cosa, cosas, inicial, return, sentencia_if,
    sentencia_llaves, sentencia_while, instruccion, argumentos, argumento, sentencia_do,
    sentencia_else, sentencia_switch, cases, sentencia_case, sentencia_for, cosa_funcion, parametro_error,
    funcion_error, error_sentencia_if, error_sentencia,error_sentencia_while,error_simbolo_fuera_de_lugar,
    error_cosa, token_invalido, error_sentencia_for,
    token_control, error_parentesis, error_sentencia_do, error_instruccion, error_sentencia_switch, error_sentencia_case,
    error_operacion, error_asignacion, do, condicion, sentencia_if_else, while_condicion
;

non terminal Object[] declaracion_multiple, resto_declaracion_multiple, parametros, parametros_opc, resto_parametros, elementos, resto_elementos
;

precedence right INT;
precedence right CHAR;
precedence right ELSE; 
precedence right LONG;
precedence right FLOAT;
precedence right DOUBLE;
precedence right SHORT;
precedence right NUMERO_FLOAT;
precedence right NUMERO_HEX;
precedence right NUMERO_OCT;
precedence right NUMERO;
precedence right LITERAL;
precedence left RETURN;



precedence left SUMA;
precedence left RESTA;
precedence left MULTIPLICACION;
precedence left DIVISION;
precedence left OP_LOGICO;
precedence left OP_RELACIONAL;
precedence right OP_INCDEC;
precedence left MODULO;

precedence right IDENTIFICADOR;
precedence right WHILE;

precedence left PARDER;
precedence left PARIZQ;
precedence left LLAVEDER;
precedence left LLAVEIZQ;
precedence left CORCHETEDER;
precedence left CORCHETEIZQ;
precedence left PCOMA;
precedence left OP_LOGICO;
precedence left OP_NEGACION;
precedence left CONST;
precedence left VOID;
precedence left COMA;
precedence left ERROR;
precedence left WHILE;


start with inicial;


inicial ::= programa funcion | programa error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en estructura de programa. "+
    "Revise que haya al menos una función y que no haya declaraciones al final "); :}
;

programa ::= programa cosa | /*vacio*/
;


cosa ::= declaracion | funcion:i  
    | error_cosa 
;

error_cosa ::= 
    sentencia:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Sentencia no esperada fuera de una función"); :} |
    error_simbolo_fuera_de_lugar:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Símbolo fuera de lugar"); :} |
    cosa LLAVEDER:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Llave derecha sin una llave izquierda respectiva."); :} |
    error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error desconocido "); :} |
    error:i PCOMA {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error desconocido, se leyó hasta siguiente punto y coma"); :}
;

error_simbolo_fuera_de_lugar ::=
    PARIZQ | PARDER 
;

token_invalido ::= 
    ERROR:i {: System.out.println("Error léxico en línea " + (iright+1)+", columna " + (ileft+1) + " causado por \""+i+"\"" ); :}
;


t_dato ::= 
    LONG:t 
    {: 
        //RESULT = t; 
        pilaSemantica.push("tipo", t);    
    :}
    | 
    INT:t
    {: 
        //RESULT = t; 
        pilaSemantica.push("tipo",t);    
    :}
    | 
    CHAR:t
    {: 
        //RESULT = t; 
        pilaSemantica.push("tipo",t);
    :}
    | 
    FLOAT:t
    {: 
        //RESULT = t; 
        pilaSemantica.push("tipo",t);    
    :}
    | 
    DOUBLE:t
    {: 
        //RESULT = t; 
        pilaSemantica.push("tipo",t);    
    :} 
    | 
    SHORT:t
    {: 
        //RESULT = t; 
        pilaSemantica.push("tipo", t);
    :}
;

valor_numerico ::=
    NUMERO:n
        {: RESULT = n;
            pilaSemantica.push("numero", n); :}
    | 
    NUMERO_FLOAT:n
        {: RESULT = n; :}
    | 
    NUMERO_OCT:n
        {: RESULT = n; :} 
    | 
    NUMERO_HEX:n
        {: RESULT = n; :}
;

operador ::= 
    SUMA {: pilaSemantica.push("operador", "add"); :} | 
    RESTA {: pilaSemantica.push("operador", "sub"); :} | 
    MULTIPLICACION {: pilaSemantica.push("operador", "mul"); :} | 
    DIVISION {: pilaSemantica.push("operador", "div"); :} | 
    OP_LOGICO:op {: pilaSemantica.push("operador", op.toString()); :} | 
    OP_RELACIONAL:op {: pilaSemantica.push("operador", op.toString()); :} | 
    MODULO
;

operacion ::= 
    valor operador valor 
    {:
        String op2 = pilaSemantica.pop().nombre.toString();
        String operador = pilaSemantica.pop().nombre.toString();
        String op1 = pilaSemantica.pop().nombre.toString();

        if(operador.equals("mul") || operador.equals("div")){
            labels.append(labelStack.peek(),"\nmov eax, " + op1 +
                            "\nmov ebx, " + op2 + 
                            "\n" + operador + " ebx" + 
                            "\nmov rcx, eax"); // PONE EL RESULTADO EN RCX
        } else {
            labels.append(labelStack.peek(),"\nmov rax, " + op1 + 
                            "\nmov rbx, " + op2 + 
                            "\n" + operador + " rax, rbx" + 
                            "\nmov rcx, rax"); // LO MUEVE A OTRO REGISTRO PARA QUE LO UTILICE ???
        }
        pilaSemantica.push("op");
        /*
        if(operador.equals("add")){
            pilaSemantica.push("do", Integer.toString(Integer.parseInt(op1) + Integer.parseInt(op2)));
        } else if(operador.equals("sub")){
            pilaSemantica.push("do", Integer.toString(Integer.parseInt(op1) - Integer.parseInt(op2)));
        }
        */
    :}
    | OP_INCDEC variable | 
    variable OP_INCDEC:op
    {:
        String operador = "";
        if(op.toString().equals("++")){
            operador = "add";
        } else {
            operador = "sub";
        }
        String id = pilaSemantica.pop().nombre.toString();
        labels.append(labelStack.peek(),"\nmov rax, " + id +
                        "\n" + operador + " rax, 1" + 
                        "\nmov " + id + ", rax");
    :}
    | OP_NEGACION valor 
    | error_operacion
;

error_operacion ::=
    valor operador:i  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en operación"); :}
;

valor ::= PARIZQ valor:v PARDER {: RESULT = v; :} | valor_numerico | LITERAL:l {: RESULT = l; :} | array | operacion 
    | variable:var
    {:
        RS v = pilaSemantica.pop();
        pilaSemantica.push("do", v.nombre);
        if (TablaSimbolos.get(v.nombre) == null || TablaSimbolos.get(v.nombre).cantidadParametros != null) System.out.println("Error en línea " + (varright+1) + " columna "+ (varleft+1) + ": Variable no definida  \"" + var + "\"");
    :}
    | 
    IDENTIFICADOR:id PARIZQ PARDER
    {:
        if(TablaSimbolos.get(id) == null){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Símbolo no definido \"" + id + "\"");
        } else if (TablaSimbolos.get(id).cantidadParametros == null || TablaSimbolos.get(id).cantidadParametros != 0){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Cantidad incorrecta de parámetros para \"" + id + "\"");
        }
    :}
    | 
    IDENTIFICADOR:id PARIZQ elementos:e PARDER
    {:
        int len = e.length;
        ArrayList<Object> arr = new ArrayList<Object>();

        for(int i = 0; i<len; i++){
            RS rs = pilaSemantica.pop();
            if (TablaSimbolos.get(rs.nombre) == null){
                System.out.println("Error en línea " + (eright+1)+": Símbolo no definido \"" + rs.nombre + "\"");
            } else {
                arr.add(TablaSimbolos.get(rs.nombre).tipo);
            }
        }

        if(TablaSimbolos.get(id) == null){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Símbolo no definido \"" + id + "\"");
        } else if (TablaSimbolos.get(id).cantidadParametros == null || TablaSimbolos.get(id).cantidadParametros != len){
            System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Cantidad incorrecta de parámetros para \"" + id + "\"");
        } else {
            if (!Arrays.equals(arr.toArray(), TablaSimbolos.get(id).tipoParametros)) System.out.println("Error en línea " + (idright+1)+", columna " + (idleft+1) + ": Tipos incorrectos de parámetros para \"" + id + "\"");
        }
    :}
    |
    asignacion
;


array ::= LLAVEIZQ elementos LLAVEDER | LLAVEIZQ LLAVEDER 
    | LLAVEIZQ error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave derecha"); :}
;

elementos ::= 
    valor:v resto_elementos:e
    {:
        
        int len = e.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i+1] = e[i];
        }
        arr[0] = v;
        RESULT = arr;
        
    :}
    | valor:i valor {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se espera una coma"); :}   
    | valor:i COMA {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se espera un valor después de la coma"); :}
;

resto_elementos ::=
    /* VACIO */
    {:
        Object[] arr = {};
        RESULT = arr;
    :}
    |
    COMA valor:v resto_elementos:e
    {:
        int len = e.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i+1] = e[i];
        }
        arr[0] = v;
        RESULT = arr; 
    :}
;

variable ::= IDENTIFICADOR:id {: pilaSemantica.push("id", id); :} 
//| IDENTIFICADOR CORCHETEIZQ CORCHETEDER | IDENTIFICADOR CORCHETEIZQ NUMERO CORCHETEDER
;

error_declaracion ::= 
    t_dato variable:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); :} 
    | CONST t_dato IDENTIFICADOR asignacion:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); :} 
    | CONST t_dato IDENTIFICADOR:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma en declaración"); :}  
    | CONST t_dato IDENTIFICADOR error:i PCOMA {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error no reconocido en declaración"); :} 
;

declaracion ::= 
    t_dato:t declaracion_multiple:d 
    {: 
        ArrayList<Object> arr = new ArrayList<Object>();
        
        while(pilaSemantica.peek().clase != "tipo"){
            arr.add(pilaSemantica.pop().nombre);
        }

        Object tipo = pilaSemantica.pop().nombre;

        for (int i = 0; i<arr.size(); i++) {
            if (TablaSimbolos.get(arr.get(i)) != null){
                System.out.println("Error en línea " + (dright+1) + ": Múltiple declaración de símbolo  \"" + arr.get(i) + "\"");
            } else {
                if (tipo.toString().equals("int")){
                    TablaSimbolos.put(arr.get(i), new simbolo(arr.get(i), tipo, 0));
                } else {
                    TablaSimbolos.put(arr.get(i), new simbolo(arr.get(i), tipo));
                    // Tal vez aqui se deberia usar la pila semantica
                }
            }
        }

        /*
        int len = d.length;
        */
    :} PCOMA
    |
    t_dato variable:v PCOMA 
    {:
        RS id = pilaSemantica.pop();
        RS tipo = pilaSemantica.pop(); 
     
        if (TablaSimbolos.get(id.nombre) != null){
            System.out.println("Error en línea " + (vright+1) + ": Múltiple declaración de símbolo  \"" + id.nombre + "\"");
        } else {
            if (tipo.nombre.equals("int")){
                TablaSimbolos.put(id.nombre, new simbolo(id.nombre, tipo.nombre,0));
            } else {
                TablaSimbolos.put(id.nombre, new simbolo(id.nombre, tipo.nombre));
            }
        }
    :}
    |
    CONST t_dato:tipo IDENTIFICADOR:id asignacion:valor PCOMA
    {:
        //TablaSimbolos.put(id, new simbolo(id, tipo, valor));
    :}
    |
    CONST t_dato:tipo IDENTIFICADOR:id PCOMA
    {:
        TablaSimbolos.put(id, new simbolo(id, tipo));
    :}
    |
    error_declaracion |
    token_invalido
    
;
error_declaracion_multiple ::=
    IDENTIFICADOR:i declaracion_multiple {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta una coma"); :}
;

declaracion_multiple ::= 
    variable:v resto_declaracion_multiple:d 
    {: 
        int len = d.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i] = d[i];
        }
        arr[len] = v;
        RESULT = arr;
    :} 
;

resto_declaracion_multiple ::=
    /* vacio */
    {:
        Object[] arr = {};
        RESULT = arr;
    :}
    |
    COMA variable:v resto_declaracion_multiple:r
    {:
        int len = r.length;
        Object[] arr = new Object[len+1];
        for (int i = 0; i<len; i++){
            arr[i] = r[i];
        }
        arr[len] = v;
        RESULT = arr; 
    :}
;

asignacion ::=
    variable:var IGUAL valor 
    {:
        RS valor = pilaSemantica.pop();
        RS variable = pilaSemantica.pop();

        String op1 = variable.nombre.toString();
        String op2 = "";

        if (TablaSimbolos.get(variable.nombre) == null || TablaSimbolos.get(variable.nombre).cantidadParametros != null) System.out.println("Error en línea " + (varright+1) + ": Variable no definida  \"" + variable.nombre + "\""); 
        
        if (valor.clase.equals("op")){
            op2 = "rcx";
        } else {
            op2 = valor.nombre.toString();
        }
        
        labels.append(labelStack.peek(),"\nmov " + op1 + ", " + op2);

        pilaSemantica.push(valor);
    :}
    | t_dato variable IGUAL valor:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": No se puede declarar y asignar una variable en la misma sentencia"); :}
    | error_asignacion
;

error_asignacion ::= 
    variable IGUAL error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se esperaba expresión en asignación"); :}
;

parametros_opc ::= 
    {:
        pilaSemantica.push("stop");
    :}
    /*vacio*/ 
    | 
    {:
        pilaSemantica.push("stop");
    :}
    parametros:p
;

parametros ::= 
    parametro:p resto_parametros:ps

;

resto_parametros ::= 
    /* vacio */
   
    |
    COMA parametro:p resto_parametros:ps

;

parametro ::= 
    t_dato:t variable
    {:
        RS variable = pilaSemantica.pop();
        //RESULT = t;
    :}
    | 
    parametro_error
;

parametro_error ::= 
    variable:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta tipo de dato del argumento."); :} | 
    t_dato:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta el argumento"); :}
;

return ::= RETURN valor PCOMA | RETURN PCOMA | error_return 
;

error_return::=
    RETURN valor:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :}|
    RETURN error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Return Inválido"); :}
;

funcion ::=
    t_dato:t IDENTIFICADOR:id PARIZQ parametros_opc:p PARDER
    LLAVEIZQ dentro_funcion LLAVEDER
    {:
        ArrayList<Object> arr = new ArrayList<Object>();
        while(pilaSemantica.peek().clase != "stop"){
            RS rs = pilaSemantica.pop();
            if(rs.clase == "tipo") arr.add(rs.nombre);
        }

        pilaSemantica.pop(); // saca el stop

        Object tipo = pilaSemantica.pop().nombre;

        if(TablaSimbolos.get(id) != null){
            System.out.println("Error en línea " + (idright+1) + ": Múltiple declaración de símbolo  \"" + id + "\"");
        } else {
            TablaSimbolos.put(id, new simbolo(id, tipo, arr.size(), arr.toArray()));
        }
    :}
    | 
    VOID:v IDENTIFICADOR:id PARIZQ parametros_opc:p PARDER LLAVEIZQ dentro_funcion LLAVEDER
    {:
        //TablaSimbolos.put(id, new simbolo(id, v, p.length, p));
    :}
    | 
    funcion_error
;



dentro_funcion ::= dentro_funcion cosa_funcion | /*vacio*/ 
;

cosa_funcion ::= declaracion | sentencia
;

sentencias ::= 
    sentencia sentencias | sentencia
;

sentencia ::=
    asignacion PCOMA
    {:
        pilaSemantica.pop();
    :}
    |
    IDENTIFICADOR OP_ATRIBUCION NUMERO PCOMA
    | valor PCOMA
    | return 
    | sentencia_if
    {:
        while (pilaSemantica.peek().clase != "condicion") pilaSemantica.pop();
        pilaSemantica.pop();
    :}
    | sentencia_if_else sentencia
    {:
        labels.append(labelStack.peek(),"\nret");
        labelStack.pop();
    :}
    | sentencia_while
    {:
        System.out.println(pilaSemantica.search("while"));
        while (pilaSemantica.peek().clase != "while") pilaSemantica.pop();
        pilaSemantica.pop();
    :}
    | sentencia_switch
    | sentencia_for
    | instruccion PCOMA
    | sentencia_llaves
    | BREAK:i PCOMA
    {:
        //System.out.println(pilaSemantica.search("while"));
        if (pilaSemantica.search("while") == -1 && pilaSemantica.search("sentencia_do") == -1) System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Hay un break solito :(");
    :}
    | CONTINUE:i PCOMA
    {:
        if (pilaSemantica.search("while") == -1 && pilaSemantica.search("sentencia_do") == -1) System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Hay un continue solito :(");
    :}
    | sentencia_do
    {:
        while (pilaSemantica.peek().clase != "sentencia_do") pilaSemantica.pop();
        pilaSemantica.pop();
    :}
    | ELSE:i sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Hay un else solito :( "); :}
    | error_sentencia
    
;

sentencia_if_else ::=
    sentencia_if ELSE
    {:
        while (pilaSemantica.peek().clase != "condicion") pilaSemantica.pop();
        String operacion = pilaSemantica.pop().nombre.toString();
        String label = "label" + labels.getNumeroLabel();

        
        switch(operacion){
            case "<":
                labels.append(labelStack.peek(),"\njge " + label);
                break;
            case ">":
                labels.append(labelStack.peek(),"\njle " + label);
                break;
            case "<=":
                labels.append(labelStack.peek(),"\njg " + label);
                break;
            case ">=":
                labels.append(labelStack.peek(),"\njl " + label);
                break;
            case "==":
                labels.append(labelStack.peek(),"\njne " + label);
                break;
            case "!=":
                labels.append(labelStack.peek(),"\nje " + label);
                break;
        }
        
        labels.append(labelStack.peek(),"\t;else");

        labelStack.push(label);
        labels.append(labelStack.peek(),"\n\n" + label + ":");

    :}
;


sentencia_llaves ::= LLAVEIZQ sentencias LLAVEDER
    | LLAVEIZQ:i sentencias error {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error posiblemente causado por no cerrar la llave {"); :}
;

sentencia_if ::= IF PARIZQ condicion PARDER sentencia
    {:
        labels.append(labelStack.peek(),"\nret");
        labelStack.pop();
    :}
    | error_sentencia_if
;

// condicion recibe dos parametros y hace una operacion booleana o relacional
condicion ::= 
    valor OP_RELACIONAL:op valor
    {:
        String op2 = pilaSemantica.pop().nombre.toString();
        String op1 = pilaSemantica.pop().nombre.toString();
        String operacion = op.toString();

        Object[] a = {op1, op2};
        pilaSemantica.push("condicion", operacion, a);

        labels.append(labelStack.peek(),"\ncmp " + op1 + ", " + op2);

        String label = "label" + labels.getNumeroLabel();

        switch(operacion){
            case "<":
                labels.append(labelStack.peek(),"\njl " + label);
                break;
            case ">":
                labels.append(labelStack.peek(),"\njg " + label);
                break;
            case "<=":
                labels.append(labelStack.peek(),"\njle " + label);
                break;
            case ">=":
                labels.append(labelStack.peek(),"\njge " + label);
                break;
            case "==":
                labels.append(labelStack.peek(),"\nje " + label);
                break;
            case "!=":
                labels.append(labelStack.peek(),"\njne " + label);
                break;
        }


        labelStack.push(label);
        labels.append(labelStack.peek(),"\n\n" + label + ":");

    :}
;

while ::= WHILE {: pilaSemantica.push("while"); :}
;

while_condicion ::=
    while PARIZQ condicion PARDER
    {: 
        pilaSemantica.push("while"); 
    :}
;

sentencia_while ::= while_condicion sentencia
    {:
        while (pilaSemantica.peek().clase != "condicion") pilaSemantica.pop();
        RS condicion = pilaSemantica.pop();
        String operacion = condicion.nombre.toString();
        Object[] operadores = condicion.valor;

        labels.append(labelStack.peek(),"\ncmp " + operadores[0].toString() + ", "+ operadores[1].toString());

        String label = labelStack.peek();

        switch(operacion){
            case "<":
                labels.append(labelStack.peek(),"\njl " + label);
                break;
            case ">":
                labels.append(labelStack.peek(),"\njg " + label);
                break;
            case "<=":
                labels.append(labelStack.peek(),"\njle " + label);
                break;
            case ">=":
                labels.append(labelStack.peek(),"\njge " + label);
                break;
            case "==":
                labels.append(labelStack.peek(),"\nje " + label);
                break;
            case "!=":
                labels.append(labelStack.peek(),"\njne " + label);
                break;
        }

        labels.append(labelStack.peek(),"\t\t;si no se cumple la condicion, vuelve a ejecutar");
        labels.append(labelStack.peek(),"\nret");
        labelStack.pop();
    :}
    | error_sentencia_while 
;


argumentos ::= argumento | argumento COMA argumentos | argumento:i argumento {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Se esperaba una coma"); :}
;

argumento ::= valor 
;

instruccion ::= 
    READ PARIZQ elementos PARDER  | READ PARIZQ PARDER  | WRITE PARIZQ elementos PARDER 
    | error_instruccion
; 

do ::= DO {: pilaSemantica.push("sentencia_do"); :}
;

sentencia_do ::= 
    do sentencia while PARIZQ operacion PARDER PCOMA
    | error_sentencia_do
;

sentencia_switch ::= SWITCH PARIZQ valor PARDER LLAVEIZQ cases LLAVEDER
    | error_sentencia_switch
;

cases ::= sentencia_case cases | sentencia_case;

sentencia_case ::= CASE valor DOSPUNTOS sentencias | DEFAULT DOSPUNTOS sentencias |  CASE valor DOSPUNTOS | error_sentencia_case
;

sentencia_for ::= FOR PARIZQ asignacion PCOMA operacion PCOMA operacion PARDER sentencia | error_sentencia_for
;

/* ERRORES CREISI */

error_sentencia ::=
    IDENTIFICADOR OP_ATRIBUCION NUMERO:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} | 
    valor:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} |
    instruccion error:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error por punto y coma no encontrado"); :} |
    BREAK:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :} |
    CONTINUE:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :}
;

funcion_error ::=
    t_dato IDENTIFICADOR PARIZQ parametros_opc:i LLAVEIZQ dentro_funcion LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} | 
    t_dato IDENTIFICADOR parametros_opc:i PARDER LLAVEIZQ dentro_funcion LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} |
    t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER:i dentro_funcion LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta llave"); :} 
    | t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion funcion:i {: System.out.println("Error en línea " + (iright+1)+ ": Falta cerrar llave de la función"); :}
    | t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion error:i {: System.out.println("Error en línea " + (iright+1)+ ": Error en función. Probablemente faltó cerrar la llave"); :}
    | t_dato IDENTIFICADOR PARIZQ parametros_opc PARDER LLAVEIZQ dentro_funcion error:i LLAVEDER {: System.out.println("Error en línea " + (iright+1)+ ": Error no reconocido dentro de la función"); :}
;

error_parentesis ::=    
    PARIZQ argumentos |
    argumentos PARDER |
    PARDER |
    PARIZQ |
    argumentos |
    /* vacio */       
;

error_sentencia_if ::= 
    IF:i error LLAVEIZQ sentencias LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura de If inválida"); :}
;

error_sentencia_while ::= 
    while:i operacion PARDER sentencia  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} | 
    while PARIZQ operacion:i sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :} 
;

error_sentencia_do ::= 
    do sentencia while error_parentesis:i PCOMA {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis"); :}|
    do sentencia while PARIZQ operacion PARDER:i {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta punto y coma"); :}   
;

error_instruccion ::=
    READ PARIZQ  argumentos error:i  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis derecho"); :}
    | READ:i error  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Paréntesis izquierdo esperado"); :}
    | WRITE:i error  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Paréntesis izquierdo esperado"); :}
    | WRITE PARIZQ argumentos:i error  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis derecho"); :}
    | WRITE PARIZQ:i PARDER  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Función write necesita argumentos"); :}
;

error_sentencia_switch ::= 
    SWITCH error_parentesis:i LLAVEIZQ cases LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");:} | 
    SWITCH:i PARIZQ error PARDER LLAVEIZQ cases LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Error en estructura del switch");:} |
    SWITCH PARIZQ valor PARDER:i cases LLAVEDER {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta la llave");:}
;

error_sentencia_case ::= 
    CASE valor:i sentencias {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta dos puntos");:}  | 
    DOSPUNTOS:i sentencias {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta el caso");:} |
    DEFAULT DOSPUNTOS:i  {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Caso default vacío");:} 
;

error_sentencia_for ::= 
    FOR:i asignacion PCOMA operacion PCOMA operacion PARDER sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");:} | 
    FOR PARIZQ asignacion PCOMA operacion PCOMA operacion:i sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");:} | 
    FOR:i asignacion PCOMA operacion PCOMA operacion sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Falta paréntesis");:} |
    FOR:i PARIZQ error PARDER sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura del for incorrecta");:} |
    FOR:i PARIZQ error PCOMA error PARDER sentencia {: System.out.println("Error en línea " + (iright+1)+", columna " + (ileft+1) + ": Estructura del for incorrecta");:} 
;