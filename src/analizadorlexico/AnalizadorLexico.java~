// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: D:/Mariell/Documents/2021/Compi/Proyecto/Proyecto1-Compiladores/src/analizadorlexico/alexico.flex

package analizadorlexico;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna){

        this.numToken = numToken;

        this.token = new String(token);

        this.tipo = tipo;

        this.linea = linea;

        this.columna = columna;
    }
    Yytoken (String token, int linea){

        this.token = new String(token);

        this.linea = linea;
    }

    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;

    public String toString() {
        return "Token #"+numToken+": "+token+" Tipo: "+tipo+" ["+linea
        + "," +columna + "]";
    }
    public String errorToStr() {
        return "Error en la linea n√∫mero " + linea + " causado por " + token ;
    }
}




// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AnalizadorLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\0\1\6\1\11\1\12\2\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\7\23\2\24"+
    "\2\13\1\25\1\26\1\27\1\13\1\0\1\30\1\31"+
    "\1\32\1\31\1\33\1\31\1\34\1\35\1\36\2\34"+
    "\1\37\1\40\1\41\1\34\1\42\1\34\1\43\2\34"+
    "\1\44\2\34\1\45\2\34\1\13\1\46\1\13\1\6"+
    "\1\47\1\0\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\34\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\34\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\13\1\100\2\13\6\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\1\1\3\1\1\5\3"+
    "\2\4\2\3\21\5\1\3\1\0\1\6\7\0\1\7"+
    "\2\1\7\5\1\10\4\5\1\10\13\5\4\0\2\7"+
    "\1\11\2\12\31\5\4\0\16\5\3\0\7\5\3\0"+
    "\2\5\1\10\32\0\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\101\0\303\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\101\0\u0208\0\202\0\u0249\0\u028a\0\u02cb\0\u030c"+
    "\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\u0820\0\u0104\0\101\0\u0861\0\u08a2"+
    "\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u03cf\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\101\0\u11c6\0\u1207\0\u1248"+
    "\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450"+
    "\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658"+
    "\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860"+
    "\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68"+
    "\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70"+
    "\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080"+
    "\0\u20c1\0\u2102\0\u2143\0\101\0\u2184\0\u21c5\0\u2206\0\u2247"+
    "\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u27dd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\5\1\13\1\14\1\15\1\12"+
    "\1\16\1\17\2\20\1\21\1\5\1\22\3\23\1\24"+
    "\12\23\2\2\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\23\1\34\1\23\1\35\4\23\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\3\23\1\44\102\0\2\3"+
    "\1\0\1\3\11\0\1\3\110\0\1\12\52\0\7\45"+
    "\1\46\36\45\1\47\32\45\53\0\1\50\4\0\1\51"+
    "\31\0\1\12\14\0\1\12\52\0\7\52\1\0\36\52"+
    "\1\53\32\52\15\0\1\12\10\0\1\12\71\0\1\12"+
    "\6\0\2\12\3\0\1\54\61\0\1\55\4\0\1\56"+
    "\4\0\1\12\74\0\3\20\3\0\16\57\2\0\25\57"+
    "\1\60\2\57\23\0\3\20\3\0\16\57\2\0\30\57"+
    "\26\0\1\5\1\12\100\0\1\12\1\5\73\0\3\23"+
    "\3\0\16\23\2\0\30\23\23\0\3\23\3\0\15\23"+
    "\1\61\2\0\30\23\23\0\3\23\3\0\16\23\2\0"+
    "\22\23\1\62\5\23\23\0\3\23\3\0\16\23\2\0"+
    "\17\23\1\63\10\23\23\0\3\23\3\0\16\23\2\0"+
    "\1\64\6\23\1\65\5\23\1\66\12\23\23\0\3\23"+
    "\3\0\16\23\2\0\4\23\1\67\10\23\1\70\12\23"+
    "\23\0\3\23\3\0\16\23\2\0\12\23\1\64\1\23"+
    "\1\71\10\23\1\72\2\23\23\0\3\23\3\0\16\23"+
    "\2\0\12\23\1\73\2\23\1\74\12\23\23\0\3\23"+
    "\3\0\16\23\2\0\15\23\1\62\12\23\23\0\3\23"+
    "\3\0\16\23\2\0\5\23\1\75\6\23\1\76\13\23"+
    "\23\0\3\23\3\0\16\23\2\0\15\23\1\77\12\23"+
    "\23\0\3\23\3\0\16\23\2\0\4\23\1\100\23\23"+
    "\23\0\3\23\3\0\16\23\2\0\7\23\1\101\1\102"+
    "\10\23\1\103\2\23\1\104\3\23\23\0\3\23\3\0"+
    "\16\23\2\0\26\23\1\105\1\23\23\0\3\23\3\0"+
    "\16\23\2\0\14\23\1\106\13\23\23\0\3\23\3\0"+
    "\16\23\2\0\15\23\1\107\12\23\23\0\3\23\3\0"+
    "\16\23\2\0\7\23\1\110\20\23\27\0\1\12\51\0"+
    "\1\12\2\45\3\0\74\45\54\0\1\111\110\0\1\112"+
    "\26\0\1\46\66\0\2\52\3\0\74\52\45\0\1\113"+
    "\33\0\14\55\1\114\64\55\2\56\1\115\1\56\1\116"+
    "\74\56\30\0\16\57\2\0\30\57\23\0\2\117\1\120"+
    "\3\0\4\121\12\57\2\0\6\121\22\57\23\0\3\23"+
    "\3\0\12\23\1\122\3\23\2\0\30\23\23\0\3\23"+
    "\3\0\16\23\2\0\21\23\1\123\6\23\23\0\3\23"+
    "\3\0\16\23\2\0\4\23\1\124\23\23\23\0\3\23"+
    "\3\0\16\23\2\0\20\23\1\125\7\23\23\0\3\23"+
    "\3\0\16\23\2\0\1\74\27\23\23\0\3\23\3\0"+
    "\16\23\2\0\14\23\1\126\13\23\23\0\3\23\3\0"+
    "\16\23\2\0\5\23\1\127\22\23\23\0\3\23\3\0"+
    "\16\23\2\0\22\23\1\130\5\23\23\0\3\23\3\0"+
    "\16\23\2\0\22\23\1\131\5\23\23\0\3\23\3\0"+
    "\16\23\2\0\21\23\1\132\6\23\23\0\3\23\3\0"+
    "\16\23\2\0\15\23\1\133\12\23\23\0\3\23\3\0"+
    "\16\23\2\0\17\23\1\75\10\23\23\0\3\23\3\0"+
    "\16\23\2\0\21\23\1\75\6\23\23\0\3\23\3\0"+
    "\16\23\2\0\14\23\1\134\13\23\23\0\3\23\3\0"+
    "\16\23\2\0\6\23\1\135\12\23\1\136\6\23\23\0"+
    "\3\23\3\0\16\23\2\0\15\23\1\137\12\23\23\0"+
    "\3\23\3\0\16\23\2\0\6\23\1\140\20\23\1\141"+
    "\23\0\3\23\3\0\16\23\2\0\1\142\16\23\1\143"+
    "\10\23\23\0\3\23\3\0\16\23\2\0\10\23\1\144"+
    "\17\23\23\0\3\23\3\0\16\23\2\0\16\23\1\145"+
    "\11\23\23\0\3\23\3\0\16\23\2\0\10\23\1\146"+
    "\7\23\1\147\7\23\23\0\3\23\3\0\16\23\2\0"+
    "\10\23\1\150\1\23\1\151\15\23\23\0\3\23\3\0"+
    "\16\23\2\0\10\23\1\152\17\23\56\0\1\153\75\0"+
    "\1\154\70\0\1\155\36\0\14\55\1\114\4\55\1\115"+
    "\57\55\2\0\1\115\120\0\2\117\1\120\3\0\4\120"+
    "\14\0\6\120\45\0\3\120\3\0\4\120\14\0\6\120"+
    "\45\0\3\120\3\0\4\121\12\57\2\0\6\121\22\57"+
    "\23\0\3\23\3\0\16\23\1\0\1\156\30\23\23\0"+
    "\3\23\3\0\16\23\2\0\15\23\1\75\12\23\23\0"+
    "\3\23\3\0\16\23\2\0\1\157\27\23\23\0\3\23"+
    "\3\0\16\23\2\0\4\23\1\75\23\23\23\0\3\23"+
    "\3\0\16\23\2\0\20\23\1\76\1\160\6\23\23\0"+
    "\3\23\3\0\16\23\2\0\1\161\27\23\23\0\3\23"+
    "\3\0\16\23\2\0\1\23\1\152\26\23\23\0\3\23"+
    "\3\0\16\23\2\0\13\23\1\75\14\23\23\0\3\23"+
    "\3\0\16\23\2\0\4\23\1\162\23\23\23\0\3\23"+
    "\3\0\16\23\2\0\1\76\27\23\23\0\3\23\3\0"+
    "\16\23\2\0\6\23\1\75\21\23\23\0\3\23\3\0"+
    "\16\23\2\0\10\23\1\163\17\23\23\0\3\23\3\0"+
    "\16\23\2\0\22\23\1\162\5\23\23\0\3\23\3\0"+
    "\16\23\2\0\17\23\1\76\10\23\23\0\3\23\3\0"+
    "\16\23\2\0\14\23\1\164\13\23\23\0\3\23\3\0"+
    "\16\23\2\0\4\23\1\165\23\23\23\0\3\23\3\0"+
    "\16\23\2\0\21\23\1\166\6\23\23\0\3\23\3\0"+
    "\16\23\2\0\22\23\1\167\5\23\23\0\3\23\3\0"+
    "\16\23\2\0\21\23\1\170\6\23\23\0\3\23\3\0"+
    "\16\23\2\0\4\23\1\171\23\23\23\0\3\23\3\0"+
    "\16\23\2\0\15\23\1\172\12\23\23\0\3\23\3\0"+
    "\16\23\2\0\10\23\1\173\17\23\23\0\3\23\3\0"+
    "\16\23\2\0\3\23\1\75\24\23\23\0\3\23\3\0"+
    "\16\23\2\0\1\174\27\23\23\0\3\23\3\0\16\23"+
    "\2\0\12\23\1\125\15\23\61\0\1\175\102\0\1\176"+
    "\65\0\1\156\61\0\1\177\72\0\3\23\3\0\16\23"+
    "\2\0\11\23\1\75\16\23\23\0\3\23\3\0\16\23"+
    "\2\0\10\23\1\200\17\23\23\0\3\23\3\0\16\23"+
    "\2\0\22\23\1\201\5\23\23\0\3\23\3\0\16\23"+
    "\2\0\17\23\1\172\10\23\23\0\3\23\3\0\16\23"+
    "\2\0\20\23\1\202\7\23\23\0\3\23\3\0\16\23"+
    "\2\0\4\23\1\150\23\23\23\0\3\23\3\0\16\23"+
    "\2\0\15\23\1\203\12\23\23\0\3\23\3\0\16\23"+
    "\2\0\10\23\1\204\17\23\23\0\3\23\3\0\16\23"+
    "\2\0\2\23\1\76\25\23\23\0\3\23\3\0\16\23"+
    "\2\0\2\23\1\205\25\23\23\0\3\23\3\0\16\23"+
    "\2\0\3\23\1\206\24\23\23\0\3\23\3\0\16\23"+
    "\2\0\14\23\1\75\13\23\23\0\3\23\3\0\16\23"+
    "\2\0\6\23\1\140\21\23\23\0\3\23\3\0\16\23"+
    "\2\0\21\23\1\110\6\23\65\0\1\207\106\0\1\210"+
    "\45\0\1\211\63\0\3\23\3\0\16\23\2\0\14\23"+
    "\1\212\13\23\23\0\3\23\3\0\16\23\2\0\12\23"+
    "\1\76\15\23\23\0\3\23\3\0\16\23\2\0\21\23"+
    "\1\213\6\23\23\0\3\23\3\0\16\23\2\0\5\23"+
    "\1\75\22\23\23\0\3\23\3\0\16\23\2\0\2\23"+
    "\1\75\25\23\23\0\3\23\3\0\16\23\2\0\7\23"+
    "\1\75\20\23\23\0\3\23\3\0\16\23\2\0\4\23"+
    "\1\203\23\23\55\0\1\214\77\0\1\207\67\0\1\215"+
    "\60\0\3\23\3\0\16\23\2\0\22\23\1\125\5\23"+
    "\23\0\3\23\3\0\16\23\2\0\4\23\1\74\23\23"+
    "\36\0\1\216\73\0\1\217\111\0\1\220\103\0\1\221"+
    "\74\0\1\222\73\0\1\223\110\0\1\224\73\0\1\225"+
    "\74\0\1\226\66\0\1\227\11\0\1\226\101\0\1\230"+
    "\112\0\1\231\75\0\1\232\105\0\1\233\61\0\1\234"+
    "\107\0\1\235\103\0\1\236\73\0\1\237\73\0\1\240"+
    "\111\0\1\241\103\0\1\242\74\0\1\243\73\0\1\244"+
    "\110\0\1\245\73\0\1\246\74\0\1\247\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10270];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\5\1\1\11\32\1\1\0"+
    "\1\11\7\0\33\1\4\0\1\11\35\1\4\0\16\1"+
    "\3\0\7\1\3\0\2\1\1\11\32\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    Hashtable<List<String>, List<Integer>> lexemas = new Hashtable<List<String>,  List<Integer>>();
    private int contador;
    private ArrayList<Yytoken> tokens;
    private ArrayList<Yytoken> errores;
	private void writeOutputFile() throws IOException{
			String filename = "file.out";
			BufferedWriter out = new BufferedWriter(
				new FileWriter(filename));
            System.out.println("\n*** Tokens guardados en archivo ***\n");
			for(Yytoken t: this.tokens){
				//System.out.println(t);
                                lexemas.putIfAbsent(List.of(t.token, t.tipo), new ArrayList<Integer>());
                                lexemas.get(List.of(t.token, t.tipo)).add(t.linea);
				out.write(t + "\n");
			}
                        // Los errores estan en this.tokens pero son de tipo ERROR
                        //ArrayList<Integer> errores = new ArrayList<Integer>();
                lexemas.forEach((k, v) -> {
                    System.out.print(k.get(0)+" "+k.get(1)+" ");
                    System.out.print(" ");
                    int i = 0;
                    while (i < v.size()){
                        int numero = v.get(i);
                        int repeticiones = Collections.frequency(v, numero);
                        System.out.print(numero);
                        if (repeticiones > 1){
                            System.out.print("("+repeticiones+")");
                        }
                        i += repeticiones;
                        if (i<v.size()) System.out.print(", ");
                    }
                    System.out.print("\n");
                });
                // Printea los errores
                
                if (errores.size()>0) System.out.println("\nERRORES:");
                for(Yytoken e: this.errores){
                    System.out.println(e.errorToStr());
                    out.write(e.errorToStr() + "\n");
                }
                    //errores.forEach((e) -> {
                    //    System.out.println(e.errorToStr());
                    //    out.write(e + "\n");
                    //});
			out.close();
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
      contador = 0;
	tokens = new ArrayList<Yytoken>();
    errores = new ArrayList<Yytoken>();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
	try{
		this.writeOutputFile();
        System.exit(0);
	}catch(IOException ioe){
		ioe.printStackTrace();
	}
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { contador++;
    Yytoken t = new Yytoken(yytext(),yyline);
    errores.add(t);
    return t;
            }
            // fall through
          case 12: break;
          case 2:
            { //ignorar
            }
            // fall through
          case 13: break;
          case 3:
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"OPERADOR",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
            // fall through
          case 14: break;
          case 4:
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"INT",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
            // fall through
          case 15: break;
          case 5:
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"IDENTIFICADOR",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
            // fall through
          case 16: break;
          case 6:
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"LITERAL",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
            // fall through
          case 17: break;
          case 7:
            { //Ignorar
            }
            // fall through
          case 18: break;
          case 8:
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"PALABRA_RESERVADA",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
            // fall through
          case 19: break;
          case 9:
            { contador++;
    Yytoken t = new Yytoken(contador, yytext(), "NUM_OCT",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
            // fall through
          case 20: break;
          case 10:
            { contador++;
    Yytoken t = new Yytoken(contador, yytext(), "NUM_HEX",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
            // fall through
          case 21: break;
          case 11:
            { contador++;
    Yytoken t = new Yytoken(contador, yytext(), "NUM_FLOAT",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
